*** Testing adventurerRefactored
unittest1.c:78: FAILED: numHandCardsBefore < numHandCardsAfter
OK: numHandCardsBefore < numHandCardsAfter
OK: numTreasureCardsBefore == numTreasureCardsAfter
1 checks failed
File 'dominion.c'
Lines executed:87.68% of 617
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7769453:    8:int compare(const void* a, const void* b) {
  7769453:    9:  if (*(int*)a > *(int*)b)
  2220842:   10:    return 1;
  5548611:   11:  if (*(int*)a < *(int*)b)
   335638:   12:    return -1;
  5212973:   13:  return 0;
        -:   14:}
        -:   15:
        1:   16:struct gameState* newGame() {
        1:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        1:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2001:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2001:   44:  SelectStream(1);
     2001:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2001:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      688:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1313:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14443:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   144430:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   131300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1313:   73:  if (numPlayers == 2)
        -:   74:    {
      690:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      623:   77:  else if (numPlayers == 3)
        -:   78:    {
      623:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1313:   87:  if (numPlayers == 2)
        -:   88:    {
      690:   89:      state->supplyCount[estate] = 8;
      690:   90:      state->supplyCount[duchy] = 8;
      690:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      623:   95:      state->supplyCount[estate] = 12;
      623:   96:      state->supplyCount[duchy] = 12;
      623:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1313:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1313:  102:  state->supplyCount[silver] = 40;
     1313:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27573:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   216645:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   203515:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13130:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2626:  115:		  if (numPlayers == 2){ 
      690:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      623:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11817:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13130:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   190385:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4562:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3249:  140:      state->deckCount[i] = 0;
    12996:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9747:  143:	  state->deck[i][j] = estate;
     9747:  144:	  state->deckCount[i]++;
        -:  145:	}
    25992:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22743:  148:	  state->deck[i][j] = copper;
    22743:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4562:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3249:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4562:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3249:  166:      state->handCount[i] = 0;
     3249:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    36764:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35451:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1313:  182:  state->outpostPlayed = 0;
     1313:  183:  state->phase = 0;
     1313:  184:  state->numActions = 1;
     1313:  185:  state->numBuys = 1;
     1313:  186:  state->playedCardCount = 0;
     1313:  187:  state->whoseTurn = 0;
     1313:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7878:  192:  for (it = 0; it < 5; it++){
     6565:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1313:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1313:  198:  return 0;
        -:  199:}
        -:  200:
   665955:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK * 2];
   665955:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   665955:  209:  if (state->deckCount[player] < 1)
   599217:  210:    return -1;
    66738:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  //assert(state->deckCount[player] <= MAX_HAND);
    66738:  215:  if (state->deckCount[player] > MAX_HAND) {
      491:  216:    state->deckCount[player] = MAX_HAND;
        -:  217:  }
  1310380:  218:  while (state->deckCount[player] > 0) {
  1176904:  219:    card = floor(Random() * state->deckCount[player]);
  1176904:  220:    newDeck[newDeckPos] = state->deck[player][card];
  1176904:  221:    newDeckPos++;
 70560461:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
 69383557:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
  1176904:  225:    state->deckCount[player]--;
        -:  226:  }
  1243642:  227:  for (i = 0; i < newDeckPos; i++) {
  1176904:  228:    state->deck[player][i] = newDeck[i];
  1176904:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
    66738:  232:  return 0;
        -:  233:}
        -:  234:
   131243:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
   131243:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
   131243:  241:  if (state->phase != 0)
        -:  242:    {
    22105:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
   109138:  247:  if ( state->numActions < 1 )
        -:  248:    {
     3682:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
   105456:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
   105456:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    91402:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    14054:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
     4803:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
     9251:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
     9251:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
     9251:  273:  return 0;
        -:  274:}
        -:  275:
   131931:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
   131931:  284:  who = state->whoseTurn;
        -:  285:
   131931:  286:  if (state->numBuys < 1){
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    19689:  289:    return -1;
   112242:  290:  } else if (supplyCount(supplyPos, state) <1){
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    34533:  293:    return -1;
    77709:  294:  } else if (state->coins < getCost(supplyPos)){
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    54910:  297:    return -1;
        -:  298:  } else {
    22799:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    22799:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:  
    22799:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    22799:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    22799:  312:  return 0;
        -:  313:}
        -:  314:
   264275:  315:int numHandCards(struct gameState *state) {
   264275:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
   859440:  319:int handCard(int handPos, struct gameState *state) {
   859440:  320:  int currentPlayer = whoseTurn(state);
   859440:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
   140724:  324:int supplyCount(int card, struct gameState *state) {
   140724:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
        6:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
        6:  330:  int count = 0;
        -:  331:
       36:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
       30:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
       36:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
       30:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
        6:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:
        6:  347:  return count;
        -:  348:}
        -:  349:
  1403825:  350:int whoseTurn(struct gameState *state) {
  1403825:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
   131887:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
   131887:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
  1551525:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  1419638:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1419638:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
   131887:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
   131887:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    76820:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    55067:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
   131887:  374:  state->outpostPlayed = 0;
   131887:  375:  state->phase = 0;
   131887:  376:  state->numActions = 1;
   131887:  377:  state->coins = 0;
   131887:  378:  state->numBuys = 1;
   131887:  379:  state->playedCardCount = 0;
   131887:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
   791322:  384:  for (k = 0; k < 5; k++){
   659435:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
   131887:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
   131887:  391:  return 0;
        -:  392:}
        -:  393:
   659979:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
   659979:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
      688:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
   659291:  405:  j = 0;
 17141566:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
 16482275:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    49984:  410:	  j++;
        -:  411:	}
        -:  412:    }
   659291:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
   659291:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
  1272680:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
  1272680:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
  1933150:  537:    for (i = 0; i < state->discardCount[player];i++){
  1563166:  538:      state->deck[player][i] = state->discard[player][i];
  1563166:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
   369984:  542:    state->deckCount[player] = state->discardCount[player];
   369984:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
   369984:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
   369984:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
   369984:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
   369984:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
   369984:  563:    if (deckCounter == 0)
   306751:  564:      return -1;
        -:  565:
    63233:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    63233:  567:    state->deckCount[player]--;
    63233:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   902696:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   902696:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   902696:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   902696:  580:    state->deckCount[player]--;
   902696:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   965929:  584:  return 0;
        -:  585:}
        -:  586:
   102961:  587:int getCost(int cardNumber)
        -:  588:{
   102961:  589:  switch( cardNumber ) 
        -:  590:    {
    11507:  591:    case curse:
    11507:  592:      return 0;
     8649:  593:    case estate:
     8649:  594:      return 2;
     6181:  595:    case duchy:
     6181:  596:      return 5;
     5913:  597:    case province:
     5913:  598:      return 8;
    11889:  599:    case copper:
    11889:  600:      return 0;
     7880:  601:    case silver:
     7880:  602:      return 3;
     5729:  603:    case gold:
     5729:  604:      return 6;
     5718:  605:    case adventurer:
     5718:  606:      return 6;
        1:  607:    case council_room:
        1:  608:      return 5;
       16:  609:    case feast:
       16:  610:      return 4;
     6790:  611:    case gardens:
     6790:  612:      return 4;
     5890:  613:    case mine:
     5890:  614:      return 5;
      189:  615:    case remodel:
      189:  616:      return 4;
     6734:  617:    case smithy:
     6734:  618:      return 4;
     7721:  619:    case village:
     7721:  620:      return 3;
       10:  621:    case baron:
       10:  622:      return 4;
        3:  623:    case great_hall:
        3:  624:      return 3;
     5958:  625:    case minion:
     5958:  626:      return 5;
        7:  627:    case steward:
        7:  628:      return 3;
     6044:  629:    case tribute:
     6044:  630:      return 5;
       18:  631:    case ambassador:
       18:  632:      return 3;
        8:  633:    case cutpurse:
        8:  634:      return 4;
        6:  635:    case embargo: 
        6:  636:      return 2;
        3:  637:    case outpost:
        3:  638:      return 5;
       54:  639:    case salvager:
       54:  640:      return 4;
        6:  641:    case sea_hag:
        6:  642:      return 4;
        7:  643:    case treasure_map:
        7:  644:      return 4;
        -:  645:    }
        -:  646:	
       30:  647:  return -1;
        -:  648:}
        -:  649:
     3344:  650:int adventurerRefactored(int drawntreasure, struct gameState *state, int currentPlayer){
        -:  651:    int cardDrawn;
        -:  652:    int temphand[MAX_HAND * 2];
     3344:  653:    int z = 0;
   601136:  654:    while(drawntreasure<2 && z<MAX_HAND){
   594449:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   292462:  656:            shuffle(currentPlayer, state);
        -:  657:        }
   594449:  658:        drawCard(currentPlayer, state);
   594449:  659:	if (state->handCount[currentPlayer] <= 0) {
        1:  660:	    break;
        -:  661:	}
   594448:  662:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   594448:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4692:  664:            drawntreasure++;
        -:  665:        else{
   589756:  666:            temphand[z]=cardDrawn;
        -:  667:            //BUG 1: Should remove bottom card instead of top card. Changed state->handCount[currentPlayer]-- to ++
   589756:  668:            state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
   589756:  669:            z++;
        -:  670:        }
        -:  671:    }
        -:  672:    //BUG 2: Changed z-1>=0 to z-1>=1 in order to discard only when z is equal to 3 instead of 2. Which will change how many cards will be in the temphand when drawn
   596444:  673:    while(z-1>=0){
   589756:  674:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   589756:  675:        z=z-1;
        -:  676:    }
     3344:  677:    return 0;
        -:  678:
        -:  679:}
        -:  680:
      901:  681:int smithyRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    // BUG 3: Changed i < 3 to i < 2 which will change how many cards are drawn from 3 to only 2
     2703:  685:    for (i = 0; i < 2; i++)
        -:  686:    {
     1802:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:        
        -:  690:    //discard card from hand
      901:  691:    discardCard(handPos, currentPlayer, state, 0);
      901:  692:    return 0;
        -:  693:}
        -:  694:
     2464:  695:int villageRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  696:    //+1 Card
     2464:  697:    drawCard(currentPlayer, state);
        -:  698:        
        -:  699:    //+2 Actions
     2464:  700:    state->numActions = state->numActions + 2;
        -:  701:        
        -:  702:    //discard played card from hand
        -:  703:    //BUG 4: Changed discardCard 0 to 1 causing the discardCard to not add the card to played pile.
     2464:  704:    discardCard(handPos, currentPlayer, state, 1);
     2464:  705:    return 0;
        -:  706:}
        -:  707:
      348:  708:int stewardRefactored(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos){
        -:  709:
        -:  710:    //BUG 5: Changed == 1 to 2 therefore making choice1 = 1 discarding cards and choice1 = 2 will always add 2 cards skipping the add 2 coins choice. While the choice of drawing 2 cards will always lead to discarding 2 cards.
      348:  711:    if (choice1 == 2)
        -:  712:    {
        -:  713:        //+2 cards
       55:  714:        drawCard(currentPlayer, state);
       55:  715:        drawCard(currentPlayer, state);
        -:  716:    }
      293:  717:    else if (choice1 == 2)
        -:  718:    {
        -:  719:        //+2 coins
    #####:  720:        state->coins = state->coins + 2;
        -:  721:    }
        -:  722:    else
        -:  723:    {
        -:  724:        //trash 2 cards in hand
      293:  725:        discardCard(choice2, currentPlayer, state, 1);
      293:  726:        discardCard(choice3, currentPlayer, state, 1);
        -:  727:    }
        -:  728:        
        -:  729:    //discard card from hand
      348:  730:    discardCard(handPos, currentPlayer, state, 0);
      348:  731:    return 0;
        -:  732:
        -:  733:}
        -:  734:
      309:  735:int embargoRefactored(struct gameState *state, int choice1, int handPos, int currentPlayer){
        -:  736:    //+2 Coins
      309:  737:    state->coins = state->coins + 2;
        -:  738:
        -:  739:    //see if selected pile is in play
      309:  740:    if ( state->supplyCount[choice1] == -1 )
        -:  741:    {
    #####:  742:        return -1;
        -:  743:    }
        -:  744:
        -:  745:    //add embargo token to selected supply pile
      309:  746:    state->embargoTokens[choice1]++;
        -:  747:        
        -:  748:    //trash card
      309:  749:    discardCard(handPos, currentPlayer, state, 1);		
      309:  750:    return 0;
        -:  751:}
        -:  752:
    14054:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
    14054:  760:  int currentPlayer = whoseTurn(state);
    14054:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
    14054:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND * 2];// moved above the if statement
    14054:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
    14054:  767:  int z = 0;// this is the counter for the temp hand
    14054:  768:  if (nextPlayer > (state->numPlayers - 1)){
     3505:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
    14054:  774:  switch( card ) 
        -:  775:    {
        -:  776:    //REFACTORED
      712:  777:    case adventurer:
      712:  778:        adventurerRefactored(drawntreasure, state, currentPlayer);
        -:  779:
      961:  780:    case council_room:
        -:  781:      //+4 Cards
     4805:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
     3844:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
      961:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
     3642:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
     2681:  793:	  if ( i != currentPlayer )
        -:  794:	    {
     1720:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
      961:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
      961:  802:      return 0;
        -:  803:			
      565:  804:    case feast: {
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
      565:  807:      int hc = MAX_HAND;
      565:  808:      if (state->handCount[currentPlayer] < hc) {
      565:  809:	hc = state->handCount[currentPlayer];
        -:  810:      }
     3370:  811:      for (i = 0; i < hc; i++){
     2805:  812:	temphand[i] = state->hand[currentPlayer][i];//Backup card
     2805:  813:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  814:      }
        -:  815:      //Backup hand
        -:  816:
        -:  817:      //Update Coins for Buy
      565:  818:      updateCoins(currentPlayer, state, 5);
      565:  819:      x = 1;//Condition to loop on
     1571:  820:      while( x == 1) {//Buy one card
      565:  821:	if (supplyCount(choice1, state) <= 0){
        -:  822:	  if (DEBUG)
        -:  823:	    printf("None of that card left, sorry!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  827:	  }
        7:  828:	  return -1;
        -:  829:	}
      558:  830:	else if (state->coins < getCost(choice1)){
      117:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
      117:  836:	  return -1;
        -:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
      441:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      441:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
     2612:  855:      for (i = 0; i < hc; i++){
     2171:  856:	state->hand[currentPlayer][i] = temphand[i];
     2171:  857:	temphand[i] = -1;
        -:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
      441:  861:      return 0;
        -:  862:    }
        -:  863:			
     2071:  864:    case gardens:
     2071:  865:      return -1;
        -:  866:			
     1102:  867:    case mine:
     1102:  868:      if (choice1 > state->numPlayers) {
      345:  869:	return -1;
        -:  870:      }
      757:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
      757:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
      542:  875:	  return -1;
        -:  876:	}
        -:  877:		
      215:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
      215:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
      138:  885:	  return -1;
        -:  886:	}
        -:  887:
       77:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
       77:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
      145:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
      145:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
       77:  898:	      discardCard(i, currentPlayer, state, 0);			
       77:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
       77:  903:      return 0;
        -:  904:			
      610:  905:    case remodel:
      610:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
      610:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
      387:  910:	  return -1;
        -:  911:	}
        -:  912:
      223:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
      223:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
      533:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
      504:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
      194:  923:	      discardCard(i, currentPlayer, state, 0);			
      194:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
      223:  929:      return 0;
        -:  930:
        -:  931:	//REFACTORED	
      901:  932:    case smithy:
      901:  933:        smithyRefactored(currentPlayer, state, handPos);
        -:  934:
     2464:  935:    case village:
     2464:  936:        villageRefactored(currentPlayer, state, handPos);
        -:  937:
     3183:  938:    case baron:
     3183:  939:      state->numBuys++;//Increase buys by 1!
     3183:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
     2538:  941:	int p = 0;//Iterator for hand!
     2538:  942:	int card_not_discarded = 1;//Flag for discard set!
    15435:  943:	while(card_not_discarded){
    10359:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1738:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
     1738:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1738:  947:	    state->discardCount[currentPlayer]++;
     8033:  948:	    for (;p < state->handCount[currentPlayer]; p++){
     6295:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
     1738:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1738:  952:	    state->handCount[currentPlayer]--;
     1738:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
     8621:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
      800:  960:	    if (supplyCount(estate, state) > 0){
      726:  961:	      gainCard(estate, state, 0, currentPlayer);
      726:  962:	      state->supplyCount[estate]--;//Decrement estates
      726:  963:	      if (supplyCount(estate, state) == 0){
       31:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
      800:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
     7821:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
      645:  977:	if (supplyCount(estate, state) > 0){
      595:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      595:  979:	  state->supplyCount[estate]--;//Decrement Estates
      595:  980:	  if (supplyCount(estate, state) == 0){
       27:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
     3183:  987:      return 0;
        -:  988:		
      341:  989:    case great_hall:
        -:  990:      //+1 Card
      341:  991:      drawCard(currentPlayer, state);
        -:  992:			
        -:  993:      //+1 Actions
      341:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
      341:  997:      discardCard(handPos, currentPlayer, state, 0);
      341:  998:      return 0;
        -:  999:		
      515: 1000:    case minion:
        -: 1001:      //+1 action
      515: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
      515: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:			
      515: 1007:      if (choice1)		//+2 coins
        -: 1008:	{
      414: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:			
      101: 1012:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1013:	{
        -: 1014:	  //discard hand
      474: 1015:	  while(numHandCards(state) > 0)
        -: 1016:	    {
      312: 1017:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //draw 4
      405: 1021:	  for (i = 0; i < 4; i++)
        -: 1022:	    {
      324: 1023:	      drawCard(currentPlayer, state);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //other players discard hand and redraw if hand size > 4
      279: 1027:	  for (i = 0; i < state->numPlayers; i++)
        -: 1028:	    {
      198: 1029:	      if (i != currentPlayer)
        -: 1030:		{
      117: 1031:		  if ( state->handCount[i] > 4 )
        -: 1032:		    {
        -: 1033:		      //discard hand
    #####: 1034:		      while( state->handCount[i] > 0 )
        -: 1035:			{
    #####: 1036:			  discardCard(handPos, i, state, 0);
        -: 1037:			}
        -: 1038:							
        -: 1039:		      //draw 4
    #####: 1040:		      for (j = 0; j < 4; j++)
        -: 1041:			{
    #####: 1042:			  drawCard(i, state);
        -: 1043:			}
        -: 1044:		    }
        -: 1045:		}
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}
      515: 1049:      return 0;
        -: 1050:
        -: 1051:	//REFACTORED	
      348: 1052:    case steward:
      348: 1053:        stewardRefactored(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1054:
     1392: 1055:    case tribute:
     1392: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       91: 1057:	if (state->deckCount[nextPlayer] > 0){
        2: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
       89: 1061:	else if (state->discardCount[nextPlayer] > 0){
       51: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       51: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
        -: 1073:      else{
     1301: 1074:	if (state->deckCount[nextPlayer] == 0){
     3293: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
     3033: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     3033: 1077:	    state->deckCount[nextPlayer]++;
     3033: 1078:	    state->discard[nextPlayer][i] = -1;
     3033: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:			    
      260: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	} 
     1301: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1086:	state->deckCount[nextPlayer]--;
     1301: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }    
        -: 1091:		       
     1392: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      483: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      483: 1094:	state->playedCardCount++;
      483: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
     5568: 1098:      for (i = 0; i <= 2; i ++){
     4176: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
     1308: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:		    
     2868: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      813: 1104:	  drawCard(currentPlayer, state);
      813: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
     2055: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:	    
     1392: 1112:      return 0;
        -: 1113:		
      598: 1114:    case ambassador:
      598: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
      598: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
      239: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
      359: 1122:      if (choice1 == handPos)
        -: 1123:	{
       79: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
     1646: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
     1366: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
      103: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
      280: 1134:      if (j < choice2)
        -: 1135:	{
      162: 1136:	  return -1;				
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG) 
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
      118: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:			
        -: 1145:      //each other player gains a copy of revealed card
      414: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
      296: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
      178: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
      118: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
      151: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
       95: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
       88: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
       26: 1164:		  discardCard(i, currentPlayer, state, 1);
       26: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}			
        -: 1169:
      118: 1170:      return 0;
        -: 1171:		
      323: 1172:    case cutpurse:
        -: 1173:
      323: 1174:      updateCoins(currentPlayer, state, 2);
     1175: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
      852: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
      533: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
        8: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
        4: 1183:		      discardCard(j, i, state, 0);
        4: 1184:		      break;
        -: 1185:		    }
        4: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}	
    #####: 1193:		      break;
        -: 1194:		    }		
        -: 1195:		}
        -: 1196:					
        -: 1197:	    }
        -: 1198:				
        -: 1199:	}				
        -: 1200:
        -: 1201:      //discard played card from hand
      323: 1202:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1203:
      323: 1204:      return 0;
        -: 1205:
        -: 1206:	//REFACTORED	
      309: 1207:    case embargo: 
      309: 1208:        embargoRefactored(state, choice1, handPos, currentPlayer);
        -: 1209:		
      636: 1210:    case outpost:
        -: 1211:      //set outpost flag
      636: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
      636: 1215:      discardCard(handPos, currentPlayer, state, 0);
      636: 1216:      return 0;
        -: 1217:		
      319: 1218:    case salvager:
        -: 1219:      //+1 buy
      319: 1220:      state->numBuys++;
        -: 1221:			
      319: 1222:      if (choice1)
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
      245: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1226:	  //trash card
      245: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
      319: 1231:      discardCard(handPos, currentPlayer, state, 0);
      319: 1232:      return 0;
        -: 1233:		
      694: 1234:    case sea_hag:
     2373: 1235:      for (i = 0; i < state->numPlayers; i++){
     1679: 1236:	if (i != currentPlayer){
      985: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      985: 1238:	  state->discardCount[i]++;
      985: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
        -: 1241:      }
      694: 1242:      return 0;
        -: 1243:		
      744: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
      744: 1246:      index = -1;
     4231: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
     3515: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
       28: 1251:	      index = i;
       28: 1252:	      break;
        -: 1253:	    }
        -: 1254:	}
      744: 1255:      if (index > -1)
        -: 1256:	{
        -: 1257:	  //trash both treasure cards
       28: 1258:	  discardCard(handPos, currentPlayer, state, 1);
       28: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:	  //gain 4 Gold cards
      140: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
      112: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
       28: 1268:	  return 1;
        -: 1269:	}
        -: 1270:			
        -: 1271:      //no second treasure_map found in hand
      716: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return -1;
        -: 1276:}
        -: 1277:
     9035: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
     9035: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
     5349: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5349: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
     9035: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
     9035: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
      843: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
     8192: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
       77: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
     8115: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
     8115: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
     8115: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
     9035: 1313:  return 0;
        -: 1314:}
        -: 1315:
    25151: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    25151: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
       25: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
    25126: 1331:  if (toFlag == 1)
        -: 1332:    {
      112: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      112: 1334:      state->deckCount[player]++;
        -: 1335:    }
    25014: 1336:  else if (toFlag == 2)
        -: 1337:    {
       76: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       76: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
    24938: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    24938: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
    25126: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
    25126: 1350:  return 0;
        -: 1351:}
        -: 1352:
   143339: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
   143339: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
   930968: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
   787629: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
   251560: 1365:	  state->coins += 1;
        -: 1366:	}
   536069: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    23952: 1369:	  state->coins += 2;
        -: 1370:	}
   512117: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
     5853: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
   143339: 1378:  state->coins += bonus;
        -: 1379:
   143339: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
*** Testing smithyRefactored
unittest2.c:69: FAILED: numHandCardsBefore + numDrawn - numDiscarded == numHandCardsAfter
OK: numHandCardsBefore + numDrawn - numDiscarded == numHandCardsAfter
1 checks failed
File 'dominion.c'
Lines executed:87.68% of 617
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7769483:    8:int compare(const void* a, const void* b) {
  7769483:    9:  if (*(int*)a > *(int*)b)
  2220842:   10:    return 1;
  5548641:   11:  if (*(int*)a < *(int*)b)
   335646:   12:    return -1;
  5212995:   13:  return 0;
        -:   14:}
        -:   15:
        2:   16:struct gameState* newGame() {
        2:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        2:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2002:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2002:   44:  SelectStream(1);
     2002:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2002:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      688:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1314:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14454:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   144540:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   131400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1314:   73:  if (numPlayers == 2)
        -:   74:    {
      691:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      623:   77:  else if (numPlayers == 3)
        -:   78:    {
      623:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1314:   87:  if (numPlayers == 2)
        -:   88:    {
      691:   89:      state->supplyCount[estate] = 8;
      691:   90:      state->supplyCount[duchy] = 8;
      691:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      623:   95:      state->supplyCount[estate] = 12;
      623:   96:      state->supplyCount[duchy] = 12;
      623:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1314:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1314:  102:  state->supplyCount[silver] = 40;
     1314:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27594:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   216810:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   203670:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2628:  115:		  if (numPlayers == 2){ 
      691:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      623:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11826:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   190530:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4565:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3251:  140:      state->deckCount[i] = 0;
    13004:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9753:  143:	  state->deck[i][j] = estate;
     9753:  144:	  state->deckCount[i]++;
        -:  145:	}
    26008:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22757:  148:	  state->deck[i][j] = copper;
    22757:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4565:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3251:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4565:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3251:  166:      state->handCount[i] = 0;
     3251:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    36792:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35478:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1314:  182:  state->outpostPlayed = 0;
     1314:  183:  state->phase = 0;
     1314:  184:  state->numActions = 1;
     1314:  185:  state->numBuys = 1;
     1314:  186:  state->playedCardCount = 0;
     1314:  187:  state->whoseTurn = 0;
     1314:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7884:  192:  for (it = 0; it < 5; it++){
     6570:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1314:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1314:  198:  return 0;
        -:  199:}
        -:  200:
   665957:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK * 2];
   665957:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   665957:  209:  if (state->deckCount[player] < 1)
   599217:  210:    return -1;
    66740:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  //assert(state->deckCount[player] <= MAX_HAND);
    66740:  215:  if (state->deckCount[player] > MAX_HAND) {
      491:  216:    state->deckCount[player] = MAX_HAND;
        -:  217:  }
  1310404:  218:  while (state->deckCount[player] > 0) {
  1176924:  219:    card = floor(Random() * state->deckCount[player]);
  1176924:  220:    newDeck[newDeckPos] = state->deck[player][card];
  1176924:  221:    newDeckPos++;
 70560532:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
 69383608:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
  1176924:  225:    state->deckCount[player]--;
        -:  226:  }
  1243664:  227:  for (i = 0; i < newDeckPos; i++) {
  1176924:  228:    state->deck[player][i] = newDeck[i];
  1176924:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
    66740:  232:  return 0;
        -:  233:}
        -:  234:
   131243:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
   131243:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
   131243:  241:  if (state->phase != 0)
        -:  242:    {
    22105:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
   109138:  247:  if ( state->numActions < 1 )
        -:  248:    {
     3682:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
   105456:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
   105456:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    91402:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    14054:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
     4803:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
     9251:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
     9251:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
     9251:  273:  return 0;
        -:  274:}
        -:  275:
   131931:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
   131931:  284:  who = state->whoseTurn;
        -:  285:
   131931:  286:  if (state->numBuys < 1){
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    19689:  289:    return -1;
   112242:  290:  } else if (supplyCount(supplyPos, state) <1){
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    34533:  293:    return -1;
    77709:  294:  } else if (state->coins < getCost(supplyPos)){
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    54910:  297:    return -1;
        -:  298:  } else {
    22799:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    22799:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:  
    22799:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    22799:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    22799:  312:  return 0;
        -:  313:}
        -:  314:
   264277:  315:int numHandCards(struct gameState *state) {
   264277:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
   859440:  319:int handCard(int handPos, struct gameState *state) {
   859440:  320:  int currentPlayer = whoseTurn(state);
   859440:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
   140724:  324:int supplyCount(int card, struct gameState *state) {
   140724:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
        6:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
        6:  330:  int count = 0;
        -:  331:
       36:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
       30:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
       36:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
       30:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
        6:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:
        6:  347:  return count;
        -:  348:}
        -:  349:
  1403828:  350:int whoseTurn(struct gameState *state) {
  1403828:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
   131887:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
   131887:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
  1551525:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  1419638:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1419638:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
   131887:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
   131887:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    76820:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    55067:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
   131887:  374:  state->outpostPlayed = 0;
   131887:  375:  state->phase = 0;
   131887:  376:  state->numActions = 1;
   131887:  377:  state->coins = 0;
   131887:  378:  state->numBuys = 1;
   131887:  379:  state->playedCardCount = 0;
   131887:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
   791322:  384:  for (k = 0; k < 5; k++){
   659435:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
   131887:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
   131887:  391:  return 0;
        -:  392:}
        -:  393:
   659979:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
   659979:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
      688:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
   659291:  405:  j = 0;
 17141566:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
 16482275:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    49984:  410:	  j++;
        -:  411:	}
        -:  412:    }
   659291:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
   659291:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
  1272687:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
  1272687:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
  1933150:  537:    for (i = 0; i < state->discardCount[player];i++){
  1563166:  538:      state->deck[player][i] = state->discard[player][i];
  1563166:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
   369984:  542:    state->deckCount[player] = state->discardCount[player];
   369984:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
   369984:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
   369984:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
   369984:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
   369984:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
   369984:  563:    if (deckCounter == 0)
   306751:  564:      return -1;
        -:  565:
    63233:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    63233:  567:    state->deckCount[player]--;
    63233:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   902703:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   902703:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   902703:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   902703:  580:    state->deckCount[player]--;
   902703:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   965936:  584:  return 0;
        -:  585:}
        -:  586:
   102961:  587:int getCost(int cardNumber)
        -:  588:{
   102961:  589:  switch( cardNumber ) 
        -:  590:    {
    11507:  591:    case curse:
    11507:  592:      return 0;
     8649:  593:    case estate:
     8649:  594:      return 2;
     6181:  595:    case duchy:
     6181:  596:      return 5;
     5913:  597:    case province:
     5913:  598:      return 8;
    11889:  599:    case copper:
    11889:  600:      return 0;
     7880:  601:    case silver:
     7880:  602:      return 3;
     5729:  603:    case gold:
     5729:  604:      return 6;
     5718:  605:    case adventurer:
     5718:  606:      return 6;
        1:  607:    case council_room:
        1:  608:      return 5;
       16:  609:    case feast:
       16:  610:      return 4;
     6790:  611:    case gardens:
     6790:  612:      return 4;
     5890:  613:    case mine:
     5890:  614:      return 5;
      189:  615:    case remodel:
      189:  616:      return 4;
     6734:  617:    case smithy:
     6734:  618:      return 4;
     7721:  619:    case village:
     7721:  620:      return 3;
       10:  621:    case baron:
       10:  622:      return 4;
        3:  623:    case great_hall:
        3:  624:      return 3;
     5958:  625:    case minion:
     5958:  626:      return 5;
        7:  627:    case steward:
        7:  628:      return 3;
     6044:  629:    case tribute:
     6044:  630:      return 5;
       18:  631:    case ambassador:
       18:  632:      return 3;
        8:  633:    case cutpurse:
        8:  634:      return 4;
        6:  635:    case embargo: 
        6:  636:      return 2;
        3:  637:    case outpost:
        3:  638:      return 5;
       54:  639:    case salvager:
       54:  640:      return 4;
        6:  641:    case sea_hag:
        6:  642:      return 4;
        7:  643:    case treasure_map:
        7:  644:      return 4;
        -:  645:    }
        -:  646:	
       30:  647:  return -1;
        -:  648:}
        -:  649:
     3344:  650:int adventurerRefactored(int drawntreasure, struct gameState *state, int currentPlayer){
        -:  651:    int cardDrawn;
        -:  652:    int temphand[MAX_HAND * 2];
     3344:  653:    int z = 0;
   601136:  654:    while(drawntreasure<2 && z<MAX_HAND){
   594449:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   292462:  656:            shuffle(currentPlayer, state);
        -:  657:        }
   594449:  658:        drawCard(currentPlayer, state);
   594449:  659:	if (state->handCount[currentPlayer] <= 0) {
        1:  660:	    break;
        -:  661:	}
   594448:  662:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   594448:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4692:  664:            drawntreasure++;
        -:  665:        else{
   589756:  666:            temphand[z]=cardDrawn;
        -:  667:            //BUG 1: Should remove bottom card instead of top card. Changed state->handCount[currentPlayer]-- to ++
   589756:  668:            state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
   589756:  669:            z++;
        -:  670:        }
        -:  671:    }
        -:  672:    //BUG 2: Changed z-1>=0 to z-1>=1 in order to discard only when z is equal to 3 instead of 2. Which will change how many cards will be in the temphand when drawn
   596444:  673:    while(z-1>=0){
   589756:  674:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   589756:  675:        z=z-1;
        -:  676:    }
     3344:  677:    return 0;
        -:  678:
        -:  679:}
        -:  680:
      902:  681:int smithyRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    // BUG 3: Changed i < 3 to i < 2 which will change how many cards are drawn from 3 to only 2
     2706:  685:    for (i = 0; i < 2; i++)
        -:  686:    {
     1804:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:        
        -:  690:    //discard card from hand
      902:  691:    discardCard(handPos, currentPlayer, state, 0);
      902:  692:    return 0;
        -:  693:}
        -:  694:
     2464:  695:int villageRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  696:    //+1 Card
     2464:  697:    drawCard(currentPlayer, state);
        -:  698:        
        -:  699:    //+2 Actions
     2464:  700:    state->numActions = state->numActions + 2;
        -:  701:        
        -:  702:    //discard played card from hand
        -:  703:    //BUG 4: Changed discardCard 0 to 1 causing the discardCard to not add the card to played pile.
     2464:  704:    discardCard(handPos, currentPlayer, state, 1);
     2464:  705:    return 0;
        -:  706:}
        -:  707:
      348:  708:int stewardRefactored(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos){
        -:  709:
        -:  710:    //BUG 5: Changed == 1 to 2 therefore making choice1 = 1 discarding cards and choice1 = 2 will always add 2 cards skipping the add 2 coins choice. While the choice of drawing 2 cards will always lead to discarding 2 cards.
      348:  711:    if (choice1 == 2)
        -:  712:    {
        -:  713:        //+2 cards
       55:  714:        drawCard(currentPlayer, state);
       55:  715:        drawCard(currentPlayer, state);
        -:  716:    }
      293:  717:    else if (choice1 == 2)
        -:  718:    {
        -:  719:        //+2 coins
    #####:  720:        state->coins = state->coins + 2;
        -:  721:    }
        -:  722:    else
        -:  723:    {
        -:  724:        //trash 2 cards in hand
      293:  725:        discardCard(choice2, currentPlayer, state, 1);
      293:  726:        discardCard(choice3, currentPlayer, state, 1);
        -:  727:    }
        -:  728:        
        -:  729:    //discard card from hand
      348:  730:    discardCard(handPos, currentPlayer, state, 0);
      348:  731:    return 0;
        -:  732:
        -:  733:}
        -:  734:
      309:  735:int embargoRefactored(struct gameState *state, int choice1, int handPos, int currentPlayer){
        -:  736:    //+2 Coins
      309:  737:    state->coins = state->coins + 2;
        -:  738:
        -:  739:    //see if selected pile is in play
      309:  740:    if ( state->supplyCount[choice1] == -1 )
        -:  741:    {
    #####:  742:        return -1;
        -:  743:    }
        -:  744:
        -:  745:    //add embargo token to selected supply pile
      309:  746:    state->embargoTokens[choice1]++;
        -:  747:        
        -:  748:    //trash card
      309:  749:    discardCard(handPos, currentPlayer, state, 1);		
      309:  750:    return 0;
        -:  751:}
        -:  752:
    14054:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
    14054:  760:  int currentPlayer = whoseTurn(state);
    14054:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
    14054:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND * 2];// moved above the if statement
    14054:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
    14054:  767:  int z = 0;// this is the counter for the temp hand
    14054:  768:  if (nextPlayer > (state->numPlayers - 1)){
     3505:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
    14054:  774:  switch( card ) 
        -:  775:    {
        -:  776:    //REFACTORED
      712:  777:    case adventurer:
      712:  778:        adventurerRefactored(drawntreasure, state, currentPlayer);
        -:  779:
      961:  780:    case council_room:
        -:  781:      //+4 Cards
     4805:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
     3844:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
      961:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
     3642:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
     2681:  793:	  if ( i != currentPlayer )
        -:  794:	    {
     1720:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
      961:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
      961:  802:      return 0;
        -:  803:			
      565:  804:    case feast: {
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
      565:  807:      int hc = MAX_HAND;
      565:  808:      if (state->handCount[currentPlayer] < hc) {
      565:  809:	hc = state->handCount[currentPlayer];
        -:  810:      }
     3370:  811:      for (i = 0; i < hc; i++){
     2805:  812:	temphand[i] = state->hand[currentPlayer][i];//Backup card
     2805:  813:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  814:      }
        -:  815:      //Backup hand
        -:  816:
        -:  817:      //Update Coins for Buy
      565:  818:      updateCoins(currentPlayer, state, 5);
      565:  819:      x = 1;//Condition to loop on
     1571:  820:      while( x == 1) {//Buy one card
      565:  821:	if (supplyCount(choice1, state) <= 0){
        -:  822:	  if (DEBUG)
        -:  823:	    printf("None of that card left, sorry!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  827:	  }
        7:  828:	  return -1;
        -:  829:	}
      558:  830:	else if (state->coins < getCost(choice1)){
      117:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
      117:  836:	  return -1;
        -:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
      441:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      441:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
     2612:  855:      for (i = 0; i < hc; i++){
     2171:  856:	state->hand[currentPlayer][i] = temphand[i];
     2171:  857:	temphand[i] = -1;
        -:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
      441:  861:      return 0;
        -:  862:    }
        -:  863:			
     2071:  864:    case gardens:
     2071:  865:      return -1;
        -:  866:			
     1102:  867:    case mine:
     1102:  868:      if (choice1 > state->numPlayers) {
      345:  869:	return -1;
        -:  870:      }
      757:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
      757:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
      542:  875:	  return -1;
        -:  876:	}
        -:  877:		
      215:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
      215:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
      138:  885:	  return -1;
        -:  886:	}
        -:  887:
       77:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
       77:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
      145:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
      145:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
       77:  898:	      discardCard(i, currentPlayer, state, 0);			
       77:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
       77:  903:      return 0;
        -:  904:			
      610:  905:    case remodel:
      610:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
      610:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
      387:  910:	  return -1;
        -:  911:	}
        -:  912:
      223:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
      223:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
      533:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
      504:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
      194:  923:	      discardCard(i, currentPlayer, state, 0);			
      194:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
      223:  929:      return 0;
        -:  930:
        -:  931:	//REFACTORED	
      901:  932:    case smithy:
      901:  933:        smithyRefactored(currentPlayer, state, handPos);
        -:  934:
     2464:  935:    case village:
     2464:  936:        villageRefactored(currentPlayer, state, handPos);
        -:  937:
     3183:  938:    case baron:
     3183:  939:      state->numBuys++;//Increase buys by 1!
     3183:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
     2538:  941:	int p = 0;//Iterator for hand!
     2538:  942:	int card_not_discarded = 1;//Flag for discard set!
    15435:  943:	while(card_not_discarded){
    10359:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1738:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
     1738:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1738:  947:	    state->discardCount[currentPlayer]++;
     8033:  948:	    for (;p < state->handCount[currentPlayer]; p++){
     6295:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
     1738:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1738:  952:	    state->handCount[currentPlayer]--;
     1738:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
     8621:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
      800:  960:	    if (supplyCount(estate, state) > 0){
      726:  961:	      gainCard(estate, state, 0, currentPlayer);
      726:  962:	      state->supplyCount[estate]--;//Decrement estates
      726:  963:	      if (supplyCount(estate, state) == 0){
       31:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
      800:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
     7821:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
      645:  977:	if (supplyCount(estate, state) > 0){
      595:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      595:  979:	  state->supplyCount[estate]--;//Decrement Estates
      595:  980:	  if (supplyCount(estate, state) == 0){
       27:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
     3183:  987:      return 0;
        -:  988:		
      341:  989:    case great_hall:
        -:  990:      //+1 Card
      341:  991:      drawCard(currentPlayer, state);
        -:  992:			
        -:  993:      //+1 Actions
      341:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
      341:  997:      discardCard(handPos, currentPlayer, state, 0);
      341:  998:      return 0;
        -:  999:		
      515: 1000:    case minion:
        -: 1001:      //+1 action
      515: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
      515: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:			
      515: 1007:      if (choice1)		//+2 coins
        -: 1008:	{
      414: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:			
      101: 1012:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1013:	{
        -: 1014:	  //discard hand
      474: 1015:	  while(numHandCards(state) > 0)
        -: 1016:	    {
      312: 1017:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //draw 4
      405: 1021:	  for (i = 0; i < 4; i++)
        -: 1022:	    {
      324: 1023:	      drawCard(currentPlayer, state);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //other players discard hand and redraw if hand size > 4
      279: 1027:	  for (i = 0; i < state->numPlayers; i++)
        -: 1028:	    {
      198: 1029:	      if (i != currentPlayer)
        -: 1030:		{
      117: 1031:		  if ( state->handCount[i] > 4 )
        -: 1032:		    {
        -: 1033:		      //discard hand
    #####: 1034:		      while( state->handCount[i] > 0 )
        -: 1035:			{
    #####: 1036:			  discardCard(handPos, i, state, 0);
        -: 1037:			}
        -: 1038:							
        -: 1039:		      //draw 4
    #####: 1040:		      for (j = 0; j < 4; j++)
        -: 1041:			{
    #####: 1042:			  drawCard(i, state);
        -: 1043:			}
        -: 1044:		    }
        -: 1045:		}
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}
      515: 1049:      return 0;
        -: 1050:
        -: 1051:	//REFACTORED	
      348: 1052:    case steward:
      348: 1053:        stewardRefactored(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1054:
     1392: 1055:    case tribute:
     1392: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       91: 1057:	if (state->deckCount[nextPlayer] > 0){
        2: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
       89: 1061:	else if (state->discardCount[nextPlayer] > 0){
       51: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       51: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
        -: 1073:      else{
     1301: 1074:	if (state->deckCount[nextPlayer] == 0){
     3293: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
     3033: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     3033: 1077:	    state->deckCount[nextPlayer]++;
     3033: 1078:	    state->discard[nextPlayer][i] = -1;
     3033: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:			    
      260: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	} 
     1301: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1086:	state->deckCount[nextPlayer]--;
     1301: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }    
        -: 1091:		       
     1392: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      483: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      483: 1094:	state->playedCardCount++;
      483: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
     5568: 1098:      for (i = 0; i <= 2; i ++){
     4176: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
     1308: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:		    
     2868: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      813: 1104:	  drawCard(currentPlayer, state);
      813: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
     2055: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:	    
     1392: 1112:      return 0;
        -: 1113:		
      598: 1114:    case ambassador:
      598: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
      598: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
      239: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
      359: 1122:      if (choice1 == handPos)
        -: 1123:	{
       79: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
     1646: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
     1366: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
      103: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
      280: 1134:      if (j < choice2)
        -: 1135:	{
      162: 1136:	  return -1;				
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG) 
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
      118: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:			
        -: 1145:      //each other player gains a copy of revealed card
      414: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
      296: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
      178: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
      118: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
      151: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
       95: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
       88: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
       26: 1164:		  discardCard(i, currentPlayer, state, 1);
       26: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}			
        -: 1169:
      118: 1170:      return 0;
        -: 1171:		
      323: 1172:    case cutpurse:
        -: 1173:
      323: 1174:      updateCoins(currentPlayer, state, 2);
     1175: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
      852: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
      533: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
        8: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
        4: 1183:		      discardCard(j, i, state, 0);
        4: 1184:		      break;
        -: 1185:		    }
        4: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}	
    #####: 1193:		      break;
        -: 1194:		    }		
        -: 1195:		}
        -: 1196:					
        -: 1197:	    }
        -: 1198:				
        -: 1199:	}				
        -: 1200:
        -: 1201:      //discard played card from hand
      323: 1202:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1203:
      323: 1204:      return 0;
        -: 1205:
        -: 1206:	//REFACTORED	
      309: 1207:    case embargo: 
      309: 1208:        embargoRefactored(state, choice1, handPos, currentPlayer);
        -: 1209:		
      636: 1210:    case outpost:
        -: 1211:      //set outpost flag
      636: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
      636: 1215:      discardCard(handPos, currentPlayer, state, 0);
      636: 1216:      return 0;
        -: 1217:		
      319: 1218:    case salvager:
        -: 1219:      //+1 buy
      319: 1220:      state->numBuys++;
        -: 1221:			
      319: 1222:      if (choice1)
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
      245: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1226:	  //trash card
      245: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
      319: 1231:      discardCard(handPos, currentPlayer, state, 0);
      319: 1232:      return 0;
        -: 1233:		
      694: 1234:    case sea_hag:
     2373: 1235:      for (i = 0; i < state->numPlayers; i++){
     1679: 1236:	if (i != currentPlayer){
      985: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      985: 1238:	  state->discardCount[i]++;
      985: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
        -: 1241:      }
      694: 1242:      return 0;
        -: 1243:		
      744: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
      744: 1246:      index = -1;
     4231: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
     3515: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
       28: 1251:	      index = i;
       28: 1252:	      break;
        -: 1253:	    }
        -: 1254:	}
      744: 1255:      if (index > -1)
        -: 1256:	{
        -: 1257:	  //trash both treasure cards
       28: 1258:	  discardCard(handPos, currentPlayer, state, 1);
       28: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:	  //gain 4 Gold cards
      140: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
      112: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
       28: 1268:	  return 1;
        -: 1269:	}
        -: 1270:			
        -: 1271:      //no second treasure_map found in hand
      716: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return -1;
        -: 1276:}
        -: 1277:
     9036: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
     9036: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
     5350: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5350: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
     9036: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
     9036: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
      843: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
     8193: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
       77: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
     8116: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
     8116: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
     8116: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
     9036: 1313:  return 0;
        -: 1314:}
        -: 1315:
    25151: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    25151: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
       25: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
    25126: 1331:  if (toFlag == 1)
        -: 1332:    {
      112: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      112: 1334:      state->deckCount[player]++;
        -: 1335:    }
    25014: 1336:  else if (toFlag == 2)
        -: 1337:    {
       76: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       76: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
    24938: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    24938: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
    25126: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
    25126: 1350:  return 0;
        -: 1351:}
        -: 1352:
   143340: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
   143340: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
   930974: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
   787634: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
   251564: 1365:	  state->coins += 1;
        -: 1366:	}
   536070: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    23952: 1369:	  state->coins += 2;
        -: 1370:	}
   512118: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
     5853: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
   143340: 1378:  state->coins += bonus;
        -: 1379:
   143340: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
*** Testing adventurer card
gold:6
silver:5
cardtest1.c:83: FAILED: numHandCardsBefore + 2 == numHandCardsAfter
OK: numHandCardsBefore + 2 == numHandCardsAfter
cardtest1.c:85: FAILED: numDiscardBefore + 2 == numDiscardAfter
OK: numDiscardBefore + 2 == numDiscardAfter
2 checks failed
File 'dominion.c'
Lines executed:87.68% of 617
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7769514:    8:int compare(const void* a, const void* b) {
  7769514:    9:  if (*(int*)a > *(int*)b)
  2220843:   10:    return 1;
  5548671:   11:  if (*(int*)a < *(int*)b)
   335654:   12:    return -1;
  5213017:   13:  return 0;
        -:   14:}
        -:   15:
        3:   16:struct gameState* newGame() {
        3:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        3:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2003:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2003:   44:  SelectStream(1);
     2003:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2003:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      688:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1315:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14465:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   144650:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   131500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1315:   73:  if (numPlayers == 2)
        -:   74:    {
      692:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      623:   77:  else if (numPlayers == 3)
        -:   78:    {
      623:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1315:   87:  if (numPlayers == 2)
        -:   88:    {
      692:   89:      state->supplyCount[estate] = 8;
      692:   90:      state->supplyCount[duchy] = 8;
      692:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      623:   95:      state->supplyCount[estate] = 12;
      623:   96:      state->supplyCount[duchy] = 12;
      623:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1315:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1315:  102:  state->supplyCount[silver] = 40;
     1315:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27615:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   216975:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   203825:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13150:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2630:  115:		  if (numPlayers == 2){ 
      692:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      623:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11835:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   190675:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4568:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3253:  140:      state->deckCount[i] = 0;
    13012:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9759:  143:	  state->deck[i][j] = estate;
     9759:  144:	  state->deckCount[i]++;
        -:  145:	}
    26024:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22771:  148:	  state->deck[i][j] = copper;
    22771:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4568:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3253:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4568:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3253:  166:      state->handCount[i] = 0;
     3253:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    36820:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35505:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1315:  182:  state->outpostPlayed = 0;
     1315:  183:  state->phase = 0;
     1315:  184:  state->numActions = 1;
     1315:  185:  state->numBuys = 1;
     1315:  186:  state->playedCardCount = 0;
     1315:  187:  state->whoseTurn = 0;
     1315:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7890:  192:  for (it = 0; it < 5; it++){
     6575:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1315:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1315:  198:  return 0;
        -:  199:}
        -:  200:
   665961:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK * 2];
   665961:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   665961:  209:  if (state->deckCount[player] < 1)
   599218:  210:    return -1;
    66743:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  //assert(state->deckCount[player] <= MAX_HAND);
    66743:  215:  if (state->deckCount[player] > MAX_HAND) {
      491:  216:    state->deckCount[player] = MAX_HAND;
        -:  217:  }
  1310432:  218:  while (state->deckCount[player] > 0) {
  1176946:  219:    card = floor(Random() * state->deckCount[player]);
  1176946:  220:    newDeck[newDeckPos] = state->deck[player][card];
  1176946:  221:    newDeckPos++;
 70560606:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
 69383660:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
  1176946:  225:    state->deckCount[player]--;
        -:  226:  }
  1243689:  227:  for (i = 0; i < newDeckPos; i++) {
  1176946:  228:    state->deck[player][i] = newDeck[i];
  1176946:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
    66743:  232:  return 0;
        -:  233:}
        -:  234:
   131243:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
   131243:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
   131243:  241:  if (state->phase != 0)
        -:  242:    {
    22105:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
   109138:  247:  if ( state->numActions < 1 )
        -:  248:    {
     3682:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
   105456:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
   105456:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    91402:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    14054:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
     4803:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
     9251:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
     9251:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
     9251:  273:  return 0;
        -:  274:}
        -:  275:
   131931:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
   131931:  284:  who = state->whoseTurn;
        -:  285:
   131931:  286:  if (state->numBuys < 1){
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    19689:  289:    return -1;
   112242:  290:  } else if (supplyCount(supplyPos, state) <1){
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    34533:  293:    return -1;
    77709:  294:  } else if (state->coins < getCost(supplyPos)){
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    54910:  297:    return -1;
        -:  298:  } else {
    22799:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    22799:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:  
    22799:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    22799:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    22799:  312:  return 0;
        -:  313:}
        -:  314:
   264279:  315:int numHandCards(struct gameState *state) {
   264279:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
   859440:  319:int handCard(int handPos, struct gameState *state) {
   859440:  320:  int currentPlayer = whoseTurn(state);
   859440:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
   140724:  324:int supplyCount(int card, struct gameState *state) {
   140724:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
        6:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
        6:  330:  int count = 0;
        -:  331:
       36:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
       30:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
       36:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
       30:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
        6:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:
        6:  347:  return count;
        -:  348:}
        -:  349:
  1403832:  350:int whoseTurn(struct gameState *state) {
  1403832:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
   131887:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
   131887:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
  1551525:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  1419638:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1419638:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
   131887:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
   131887:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    76820:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    55067:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
   131887:  374:  state->outpostPlayed = 0;
   131887:  375:  state->phase = 0;
   131887:  376:  state->numActions = 1;
   131887:  377:  state->coins = 0;
   131887:  378:  state->numBuys = 1;
   131887:  379:  state->playedCardCount = 0;
   131887:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
   791322:  384:  for (k = 0; k < 5; k++){
   659435:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
   131887:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
   131887:  391:  return 0;
        -:  392:}
        -:  393:
   659979:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
   659979:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
      688:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
   659291:  405:  j = 0;
 17141566:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
 16482275:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    49984:  410:	  j++;
        -:  411:	}
        -:  412:    }
   659291:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
   659291:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
  1272701:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
  1272701:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
  1933154:  537:    for (i = 0; i < state->discardCount[player];i++){
  1563168:  538:      state->deck[player][i] = state->discard[player][i];
  1563168:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
   369986:  542:    state->deckCount[player] = state->discardCount[player];
   369986:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
   369986:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
   369986:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
   369986:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
   369986:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
   369986:  563:    if (deckCounter == 0)
   306752:  564:      return -1;
        -:  565:
    63234:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    63234:  567:    state->deckCount[player]--;
    63234:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   902715:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   902715:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   902715:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   902715:  580:    state->deckCount[player]--;
   902715:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   965949:  584:  return 0;
        -:  585:}
        -:  586:
   102961:  587:int getCost(int cardNumber)
        -:  588:{
   102961:  589:  switch( cardNumber ) 
        -:  590:    {
    11507:  591:    case curse:
    11507:  592:      return 0;
     8649:  593:    case estate:
     8649:  594:      return 2;
     6181:  595:    case duchy:
     6181:  596:      return 5;
     5913:  597:    case province:
     5913:  598:      return 8;
    11889:  599:    case copper:
    11889:  600:      return 0;
     7880:  601:    case silver:
     7880:  602:      return 3;
     5729:  603:    case gold:
     5729:  604:      return 6;
     5718:  605:    case adventurer:
     5718:  606:      return 6;
        1:  607:    case council_room:
        1:  608:      return 5;
       16:  609:    case feast:
       16:  610:      return 4;
     6790:  611:    case gardens:
     6790:  612:      return 4;
     5890:  613:    case mine:
     5890:  614:      return 5;
      189:  615:    case remodel:
      189:  616:      return 4;
     6734:  617:    case smithy:
     6734:  618:      return 4;
     7721:  619:    case village:
     7721:  620:      return 3;
       10:  621:    case baron:
       10:  622:      return 4;
        3:  623:    case great_hall:
        3:  624:      return 3;
     5958:  625:    case minion:
     5958:  626:      return 5;
        7:  627:    case steward:
        7:  628:      return 3;
     6044:  629:    case tribute:
     6044:  630:      return 5;
       18:  631:    case ambassador:
       18:  632:      return 3;
        8:  633:    case cutpurse:
        8:  634:      return 4;
        6:  635:    case embargo: 
        6:  636:      return 2;
        3:  637:    case outpost:
        3:  638:      return 5;
       54:  639:    case salvager:
       54:  640:      return 4;
        6:  641:    case sea_hag:
        6:  642:      return 4;
        7:  643:    case treasure_map:
        7:  644:      return 4;
        -:  645:    }
        -:  646:	
       30:  647:  return -1;
        -:  648:}
        -:  649:
     3345:  650:int adventurerRefactored(int drawntreasure, struct gameState *state, int currentPlayer){
        -:  651:    int cardDrawn;
        -:  652:    int temphand[MAX_HAND * 2];
     3345:  653:    int z = 0;
   601142:  654:    while(drawntreasure<2 && z<MAX_HAND){
   594453:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   292462:  656:            shuffle(currentPlayer, state);
        -:  657:        }
   594453:  658:        drawCard(currentPlayer, state);
   594453:  659:	if (state->handCount[currentPlayer] <= 0) {
        1:  660:	    break;
        -:  661:	}
   594452:  662:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   594452:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4694:  664:            drawntreasure++;
        -:  665:        else{
   589758:  666:            temphand[z]=cardDrawn;
        -:  667:            //BUG 1: Should remove bottom card instead of top card. Changed state->handCount[currentPlayer]-- to ++
   589758:  668:            state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
   589758:  669:            z++;
        -:  670:        }
        -:  671:    }
        -:  672:    //BUG 2: Changed z-1>=0 to z-1>=1 in order to discard only when z is equal to 3 instead of 2. Which will change how many cards will be in the temphand when drawn
   596448:  673:    while(z-1>=0){
   589758:  674:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   589758:  675:        z=z-1;
        -:  676:    }
     3345:  677:    return 0;
        -:  678:
        -:  679:}
        -:  680:
      902:  681:int smithyRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    // BUG 3: Changed i < 3 to i < 2 which will change how many cards are drawn from 3 to only 2
     2706:  685:    for (i = 0; i < 2; i++)
        -:  686:    {
     1804:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:        
        -:  690:    //discard card from hand
      902:  691:    discardCard(handPos, currentPlayer, state, 0);
      902:  692:    return 0;
        -:  693:}
        -:  694:
     2464:  695:int villageRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  696:    //+1 Card
     2464:  697:    drawCard(currentPlayer, state);
        -:  698:        
        -:  699:    //+2 Actions
     2464:  700:    state->numActions = state->numActions + 2;
        -:  701:        
        -:  702:    //discard played card from hand
        -:  703:    //BUG 4: Changed discardCard 0 to 1 causing the discardCard to not add the card to played pile.
     2464:  704:    discardCard(handPos, currentPlayer, state, 1);
     2464:  705:    return 0;
        -:  706:}
        -:  707:
      348:  708:int stewardRefactored(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos){
        -:  709:
        -:  710:    //BUG 5: Changed == 1 to 2 therefore making choice1 = 1 discarding cards and choice1 = 2 will always add 2 cards skipping the add 2 coins choice. While the choice of drawing 2 cards will always lead to discarding 2 cards.
      348:  711:    if (choice1 == 2)
        -:  712:    {
        -:  713:        //+2 cards
       55:  714:        drawCard(currentPlayer, state);
       55:  715:        drawCard(currentPlayer, state);
        -:  716:    }
      293:  717:    else if (choice1 == 2)
        -:  718:    {
        -:  719:        //+2 coins
    #####:  720:        state->coins = state->coins + 2;
        -:  721:    }
        -:  722:    else
        -:  723:    {
        -:  724:        //trash 2 cards in hand
      293:  725:        discardCard(choice2, currentPlayer, state, 1);
      293:  726:        discardCard(choice3, currentPlayer, state, 1);
        -:  727:    }
        -:  728:        
        -:  729:    //discard card from hand
      348:  730:    discardCard(handPos, currentPlayer, state, 0);
      348:  731:    return 0;
        -:  732:
        -:  733:}
        -:  734:
      309:  735:int embargoRefactored(struct gameState *state, int choice1, int handPos, int currentPlayer){
        -:  736:    //+2 Coins
      309:  737:    state->coins = state->coins + 2;
        -:  738:
        -:  739:    //see if selected pile is in play
      309:  740:    if ( state->supplyCount[choice1] == -1 )
        -:  741:    {
    #####:  742:        return -1;
        -:  743:    }
        -:  744:
        -:  745:    //add embargo token to selected supply pile
      309:  746:    state->embargoTokens[choice1]++;
        -:  747:        
        -:  748:    //trash card
      309:  749:    discardCard(handPos, currentPlayer, state, 1);		
      309:  750:    return 0;
        -:  751:}
        -:  752:
    14055:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
    14055:  760:  int currentPlayer = whoseTurn(state);
    14055:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
    14055:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND * 2];// moved above the if statement
    14055:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
    14055:  767:  int z = 0;// this is the counter for the temp hand
    14055:  768:  if (nextPlayer > (state->numPlayers - 1)){
     3505:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
    14055:  774:  switch( card ) 
        -:  775:    {
        -:  776:    //REFACTORED
      713:  777:    case adventurer:
      713:  778:        adventurerRefactored(drawntreasure, state, currentPlayer);
        -:  779:
      962:  780:    case council_room:
        -:  781:      //+4 Cards
     4810:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
     3848:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
      962:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
     3645:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
     2683:  793:	  if ( i != currentPlayer )
        -:  794:	    {
     1721:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
      962:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
      962:  802:      return 0;
        -:  803:			
      565:  804:    case feast: {
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
      565:  807:      int hc = MAX_HAND;
      565:  808:      if (state->handCount[currentPlayer] < hc) {
      565:  809:	hc = state->handCount[currentPlayer];
        -:  810:      }
     3370:  811:      for (i = 0; i < hc; i++){
     2805:  812:	temphand[i] = state->hand[currentPlayer][i];//Backup card
     2805:  813:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  814:      }
        -:  815:      //Backup hand
        -:  816:
        -:  817:      //Update Coins for Buy
      565:  818:      updateCoins(currentPlayer, state, 5);
      565:  819:      x = 1;//Condition to loop on
     1571:  820:      while( x == 1) {//Buy one card
      565:  821:	if (supplyCount(choice1, state) <= 0){
        -:  822:	  if (DEBUG)
        -:  823:	    printf("None of that card left, sorry!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  827:	  }
        7:  828:	  return -1;
        -:  829:	}
      558:  830:	else if (state->coins < getCost(choice1)){
      117:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
      117:  836:	  return -1;
        -:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
      441:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      441:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
     2612:  855:      for (i = 0; i < hc; i++){
     2171:  856:	state->hand[currentPlayer][i] = temphand[i];
     2171:  857:	temphand[i] = -1;
        -:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
      441:  861:      return 0;
        -:  862:    }
        -:  863:			
     2071:  864:    case gardens:
     2071:  865:      return -1;
        -:  866:			
     1102:  867:    case mine:
     1102:  868:      if (choice1 > state->numPlayers) {
      345:  869:	return -1;
        -:  870:      }
      757:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
      757:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
      542:  875:	  return -1;
        -:  876:	}
        -:  877:		
      215:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
      215:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
      138:  885:	  return -1;
        -:  886:	}
        -:  887:
       77:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
       77:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
      145:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
      145:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
       77:  898:	      discardCard(i, currentPlayer, state, 0);			
       77:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
       77:  903:      return 0;
        -:  904:			
      610:  905:    case remodel:
      610:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
      610:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
      387:  910:	  return -1;
        -:  911:	}
        -:  912:
      223:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
      223:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
      533:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
      504:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
      194:  923:	      discardCard(i, currentPlayer, state, 0);			
      194:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
      223:  929:      return 0;
        -:  930:
        -:  931:	//REFACTORED	
      901:  932:    case smithy:
      901:  933:        smithyRefactored(currentPlayer, state, handPos);
        -:  934:
     2464:  935:    case village:
     2464:  936:        villageRefactored(currentPlayer, state, handPos);
        -:  937:
     3183:  938:    case baron:
     3183:  939:      state->numBuys++;//Increase buys by 1!
     3183:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
     2538:  941:	int p = 0;//Iterator for hand!
     2538:  942:	int card_not_discarded = 1;//Flag for discard set!
    15435:  943:	while(card_not_discarded){
    10359:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1738:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
     1738:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1738:  947:	    state->discardCount[currentPlayer]++;
     8033:  948:	    for (;p < state->handCount[currentPlayer]; p++){
     6295:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
     1738:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1738:  952:	    state->handCount[currentPlayer]--;
     1738:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
     8621:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
      800:  960:	    if (supplyCount(estate, state) > 0){
      726:  961:	      gainCard(estate, state, 0, currentPlayer);
      726:  962:	      state->supplyCount[estate]--;//Decrement estates
      726:  963:	      if (supplyCount(estate, state) == 0){
       31:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
      800:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
     7821:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
      645:  977:	if (supplyCount(estate, state) > 0){
      595:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      595:  979:	  state->supplyCount[estate]--;//Decrement Estates
      595:  980:	  if (supplyCount(estate, state) == 0){
       27:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
     3183:  987:      return 0;
        -:  988:		
      341:  989:    case great_hall:
        -:  990:      //+1 Card
      341:  991:      drawCard(currentPlayer, state);
        -:  992:			
        -:  993:      //+1 Actions
      341:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
      341:  997:      discardCard(handPos, currentPlayer, state, 0);
      341:  998:      return 0;
        -:  999:		
      515: 1000:    case minion:
        -: 1001:      //+1 action
      515: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
      515: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:			
      515: 1007:      if (choice1)		//+2 coins
        -: 1008:	{
      414: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:			
      101: 1012:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1013:	{
        -: 1014:	  //discard hand
      474: 1015:	  while(numHandCards(state) > 0)
        -: 1016:	    {
      312: 1017:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //draw 4
      405: 1021:	  for (i = 0; i < 4; i++)
        -: 1022:	    {
      324: 1023:	      drawCard(currentPlayer, state);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //other players discard hand and redraw if hand size > 4
      279: 1027:	  for (i = 0; i < state->numPlayers; i++)
        -: 1028:	    {
      198: 1029:	      if (i != currentPlayer)
        -: 1030:		{
      117: 1031:		  if ( state->handCount[i] > 4 )
        -: 1032:		    {
        -: 1033:		      //discard hand
    #####: 1034:		      while( state->handCount[i] > 0 )
        -: 1035:			{
    #####: 1036:			  discardCard(handPos, i, state, 0);
        -: 1037:			}
        -: 1038:							
        -: 1039:		      //draw 4
    #####: 1040:		      for (j = 0; j < 4; j++)
        -: 1041:			{
    #####: 1042:			  drawCard(i, state);
        -: 1043:			}
        -: 1044:		    }
        -: 1045:		}
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}
      515: 1049:      return 0;
        -: 1050:
        -: 1051:	//REFACTORED	
      348: 1052:    case steward:
      348: 1053:        stewardRefactored(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1054:
     1392: 1055:    case tribute:
     1392: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       91: 1057:	if (state->deckCount[nextPlayer] > 0){
        2: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
       89: 1061:	else if (state->discardCount[nextPlayer] > 0){
       51: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       51: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
        -: 1073:      else{
     1301: 1074:	if (state->deckCount[nextPlayer] == 0){
     3293: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
     3033: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     3033: 1077:	    state->deckCount[nextPlayer]++;
     3033: 1078:	    state->discard[nextPlayer][i] = -1;
     3033: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:			    
      260: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	} 
     1301: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1086:	state->deckCount[nextPlayer]--;
     1301: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }    
        -: 1091:		       
     1392: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      483: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      483: 1094:	state->playedCardCount++;
      483: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
     5568: 1098:      for (i = 0; i <= 2; i ++){
     4176: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
     1308: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:		    
     2868: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      813: 1104:	  drawCard(currentPlayer, state);
      813: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
     2055: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:	    
     1392: 1112:      return 0;
        -: 1113:		
      598: 1114:    case ambassador:
      598: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
      598: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
      239: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
      359: 1122:      if (choice1 == handPos)
        -: 1123:	{
       79: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
     1646: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
     1366: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
      103: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
      280: 1134:      if (j < choice2)
        -: 1135:	{
      162: 1136:	  return -1;				
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG) 
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
      118: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:			
        -: 1145:      //each other player gains a copy of revealed card
      414: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
      296: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
      178: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
      118: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
      151: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
       95: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
       88: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
       26: 1164:		  discardCard(i, currentPlayer, state, 1);
       26: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}			
        -: 1169:
      118: 1170:      return 0;
        -: 1171:		
      323: 1172:    case cutpurse:
        -: 1173:
      323: 1174:      updateCoins(currentPlayer, state, 2);
     1175: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
      852: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
      533: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
        8: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
        4: 1183:		      discardCard(j, i, state, 0);
        4: 1184:		      break;
        -: 1185:		    }
        4: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}	
    #####: 1193:		      break;
        -: 1194:		    }		
        -: 1195:		}
        -: 1196:					
        -: 1197:	    }
        -: 1198:				
        -: 1199:	}				
        -: 1200:
        -: 1201:      //discard played card from hand
      323: 1202:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1203:
      323: 1204:      return 0;
        -: 1205:
        -: 1206:	//REFACTORED	
      309: 1207:    case embargo: 
      309: 1208:        embargoRefactored(state, choice1, handPos, currentPlayer);
        -: 1209:		
      636: 1210:    case outpost:
        -: 1211:      //set outpost flag
      636: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
      636: 1215:      discardCard(handPos, currentPlayer, state, 0);
      636: 1216:      return 0;
        -: 1217:		
      319: 1218:    case salvager:
        -: 1219:      //+1 buy
      319: 1220:      state->numBuys++;
        -: 1221:			
      319: 1222:      if (choice1)
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
      245: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1226:	  //trash card
      245: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
      319: 1231:      discardCard(handPos, currentPlayer, state, 0);
      319: 1232:      return 0;
        -: 1233:		
      694: 1234:    case sea_hag:
     2373: 1235:      for (i = 0; i < state->numPlayers; i++){
     1679: 1236:	if (i != currentPlayer){
      985: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      985: 1238:	  state->discardCount[i]++;
      985: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
        -: 1241:      }
      694: 1242:      return 0;
        -: 1243:		
      744: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
      744: 1246:      index = -1;
     4231: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
     3515: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
       28: 1251:	      index = i;
       28: 1252:	      break;
        -: 1253:	    }
        -: 1254:	}
      744: 1255:      if (index > -1)
        -: 1256:	{
        -: 1257:	  //trash both treasure cards
       28: 1258:	  discardCard(handPos, currentPlayer, state, 1);
       28: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:	  //gain 4 Gold cards
      140: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
      112: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
       28: 1268:	  return 1;
        -: 1269:	}
        -: 1270:			
        -: 1271:      //no second treasure_map found in hand
      716: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return -1;
        -: 1276:}
        -: 1277:
     9037: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
     9037: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
     5351: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5351: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
     9037: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
     9037: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
      843: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
     8194: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
       77: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
     8117: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
     8117: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
     8117: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
     9037: 1313:  return 0;
        -: 1314:}
        -: 1315:
    25151: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    25151: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
       25: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
    25126: 1331:  if (toFlag == 1)
        -: 1332:    {
      112: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      112: 1334:      state->deckCount[player]++;
        -: 1335:    }
    25014: 1336:  else if (toFlag == 2)
        -: 1337:    {
       76: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       76: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
    24938: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    24938: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
    25126: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
    25126: 1350:  return 0;
        -: 1351:}
        -: 1352:
   143341: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
   143341: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
   930980: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
   787639: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
   251568: 1365:	  state->coins += 1;
        -: 1366:	}
   536071: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    23952: 1369:	  state->coins += 2;
        -: 1370:	}
   512119: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
     5853: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
   143341: 1378:  state->coins += bonus;
        -: 1379:
   143341: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
*** Testing smithy card
cardtest2.c:76: FAILED: numHandCardsBefore + 3 - 1 == numHandCardsAfter
1 checks failed
File 'dominion.c'
Lines executed:87.68% of 617
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7769544:    8:int compare(const void* a, const void* b) {
  7769544:    9:  if (*(int*)a > *(int*)b)
  2220843:   10:    return 1;
  5548701:   11:  if (*(int*)a < *(int*)b)
   335662:   12:    return -1;
  5213039:   13:  return 0;
        -:   14:}
        -:   15:
        4:   16:struct gameState* newGame() {
        4:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        4:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2004:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2004:   44:  SelectStream(1);
     2004:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2004:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      688:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1316:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14476:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   144760:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   131600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1316:   73:  if (numPlayers == 2)
        -:   74:    {
      693:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      623:   77:  else if (numPlayers == 3)
        -:   78:    {
      623:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1316:   87:  if (numPlayers == 2)
        -:   88:    {
      693:   89:      state->supplyCount[estate] = 8;
      693:   90:      state->supplyCount[duchy] = 8;
      693:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      623:   95:      state->supplyCount[estate] = 12;
      623:   96:      state->supplyCount[duchy] = 12;
      623:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1316:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1316:  102:  state->supplyCount[silver] = 40;
     1316:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27636:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   217140:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   203980:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2632:  115:		  if (numPlayers == 2){ 
      693:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      623:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11844:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13160:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   190820:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4571:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3255:  140:      state->deckCount[i] = 0;
    13020:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9765:  143:	  state->deck[i][j] = estate;
     9765:  144:	  state->deckCount[i]++;
        -:  145:	}
    26040:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22785:  148:	  state->deck[i][j] = copper;
    22785:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4571:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3255:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4571:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3255:  166:      state->handCount[i] = 0;
     3255:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    36848:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35532:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1316:  182:  state->outpostPlayed = 0;
     1316:  183:  state->phase = 0;
     1316:  184:  state->numActions = 1;
     1316:  185:  state->numBuys = 1;
     1316:  186:  state->playedCardCount = 0;
     1316:  187:  state->whoseTurn = 0;
     1316:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7896:  192:  for (it = 0; it < 5; it++){
     6580:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1316:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1316:  198:  return 0;
        -:  199:}
        -:  200:
   665963:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK * 2];
   665963:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   665963:  209:  if (state->deckCount[player] < 1)
   599218:  210:    return -1;
    66745:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  //assert(state->deckCount[player] <= MAX_HAND);
    66745:  215:  if (state->deckCount[player] > MAX_HAND) {
      491:  216:    state->deckCount[player] = MAX_HAND;
        -:  217:  }
  1310456:  218:  while (state->deckCount[player] > 0) {
  1176966:  219:    card = floor(Random() * state->deckCount[player]);
  1176966:  220:    newDeck[newDeckPos] = state->deck[player][card];
  1176966:  221:    newDeckPos++;
 70560677:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
 69383711:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
  1176966:  225:    state->deckCount[player]--;
        -:  226:  }
  1243711:  227:  for (i = 0; i < newDeckPos; i++) {
  1176966:  228:    state->deck[player][i] = newDeck[i];
  1176966:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
    66745:  232:  return 0;
        -:  233:}
        -:  234:
   131243:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
   131243:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
   131243:  241:  if (state->phase != 0)
        -:  242:    {
    22105:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
   109138:  247:  if ( state->numActions < 1 )
        -:  248:    {
     3682:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
   105456:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
   105456:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    91402:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    14054:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
     4803:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
     9251:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
     9251:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
     9251:  273:  return 0;
        -:  274:}
        -:  275:
   131931:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
   131931:  284:  who = state->whoseTurn;
        -:  285:
   131931:  286:  if (state->numBuys < 1){
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    19689:  289:    return -1;
   112242:  290:  } else if (supplyCount(supplyPos, state) <1){
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    34533:  293:    return -1;
    77709:  294:  } else if (state->coins < getCost(supplyPos)){
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    54910:  297:    return -1;
        -:  298:  } else {
    22799:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    22799:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:  
    22799:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    22799:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    22799:  312:  return 0;
        -:  313:}
        -:  314:
   264281:  315:int numHandCards(struct gameState *state) {
   264281:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
   859440:  319:int handCard(int handPos, struct gameState *state) {
   859440:  320:  int currentPlayer = whoseTurn(state);
   859440:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
   140724:  324:int supplyCount(int card, struct gameState *state) {
   140724:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
        6:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
        6:  330:  int count = 0;
        -:  331:
       36:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
       30:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
       36:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
       30:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
        6:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:
        6:  347:  return count;
        -:  348:}
        -:  349:
  1403836:  350:int whoseTurn(struct gameState *state) {
  1403836:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
   131887:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
   131887:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
  1551525:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  1419638:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1419638:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
   131887:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
   131887:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    76820:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    55067:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
   131887:  374:  state->outpostPlayed = 0;
   131887:  375:  state->phase = 0;
   131887:  376:  state->numActions = 1;
   131887:  377:  state->coins = 0;
   131887:  378:  state->numBuys = 1;
   131887:  379:  state->playedCardCount = 0;
   131887:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
   791322:  384:  for (k = 0; k < 5; k++){
   659435:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
   131887:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
   131887:  391:  return 0;
        -:  392:}
        -:  393:
   659979:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
   659979:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
      688:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
   659291:  405:  j = 0;
 17141566:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
 16482275:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    49984:  410:	  j++;
        -:  411:	}
        -:  412:    }
   659291:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
   659291:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
  1272709:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
  1272709:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
  1933154:  537:    for (i = 0; i < state->discardCount[player];i++){
  1563168:  538:      state->deck[player][i] = state->discard[player][i];
  1563168:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
   369986:  542:    state->deckCount[player] = state->discardCount[player];
   369986:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
   369986:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
   369986:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
   369986:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
   369986:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
   369986:  563:    if (deckCounter == 0)
   306752:  564:      return -1;
        -:  565:
    63234:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    63234:  567:    state->deckCount[player]--;
    63234:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   902723:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   902723:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   902723:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   902723:  580:    state->deckCount[player]--;
   902723:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   965957:  584:  return 0;
        -:  585:}
        -:  586:
   102961:  587:int getCost(int cardNumber)
        -:  588:{
   102961:  589:  switch( cardNumber ) 
        -:  590:    {
    11507:  591:    case curse:
    11507:  592:      return 0;
     8649:  593:    case estate:
     8649:  594:      return 2;
     6181:  595:    case duchy:
     6181:  596:      return 5;
     5913:  597:    case province:
     5913:  598:      return 8;
    11889:  599:    case copper:
    11889:  600:      return 0;
     7880:  601:    case silver:
     7880:  602:      return 3;
     5729:  603:    case gold:
     5729:  604:      return 6;
     5718:  605:    case adventurer:
     5718:  606:      return 6;
        1:  607:    case council_room:
        1:  608:      return 5;
       16:  609:    case feast:
       16:  610:      return 4;
     6790:  611:    case gardens:
     6790:  612:      return 4;
     5890:  613:    case mine:
     5890:  614:      return 5;
      189:  615:    case remodel:
      189:  616:      return 4;
     6734:  617:    case smithy:
     6734:  618:      return 4;
     7721:  619:    case village:
     7721:  620:      return 3;
       10:  621:    case baron:
       10:  622:      return 4;
        3:  623:    case great_hall:
        3:  624:      return 3;
     5958:  625:    case minion:
     5958:  626:      return 5;
        7:  627:    case steward:
        7:  628:      return 3;
     6044:  629:    case tribute:
     6044:  630:      return 5;
       18:  631:    case ambassador:
       18:  632:      return 3;
        8:  633:    case cutpurse:
        8:  634:      return 4;
        6:  635:    case embargo: 
        6:  636:      return 2;
        3:  637:    case outpost:
        3:  638:      return 5;
       54:  639:    case salvager:
       54:  640:      return 4;
        6:  641:    case sea_hag:
        6:  642:      return 4;
        7:  643:    case treasure_map:
        7:  644:      return 4;
        -:  645:    }
        -:  646:	
       30:  647:  return -1;
        -:  648:}
        -:  649:
     3345:  650:int adventurerRefactored(int drawntreasure, struct gameState *state, int currentPlayer){
        -:  651:    int cardDrawn;
        -:  652:    int temphand[MAX_HAND * 2];
     3345:  653:    int z = 0;
   601142:  654:    while(drawntreasure<2 && z<MAX_HAND){
   594453:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   292462:  656:            shuffle(currentPlayer, state);
        -:  657:        }
   594453:  658:        drawCard(currentPlayer, state);
   594453:  659:	if (state->handCount[currentPlayer] <= 0) {
        1:  660:	    break;
        -:  661:	}
   594452:  662:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   594452:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4694:  664:            drawntreasure++;
        -:  665:        else{
   589758:  666:            temphand[z]=cardDrawn;
        -:  667:            //BUG 1: Should remove bottom card instead of top card. Changed state->handCount[currentPlayer]-- to ++
   589758:  668:            state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
   589758:  669:            z++;
        -:  670:        }
        -:  671:    }
        -:  672:    //BUG 2: Changed z-1>=0 to z-1>=1 in order to discard only when z is equal to 3 instead of 2. Which will change how many cards will be in the temphand when drawn
   596448:  673:    while(z-1>=0){
   589758:  674:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   589758:  675:        z=z-1;
        -:  676:    }
     3345:  677:    return 0;
        -:  678:
        -:  679:}
        -:  680:
      903:  681:int smithyRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    // BUG 3: Changed i < 3 to i < 2 which will change how many cards are drawn from 3 to only 2
     2709:  685:    for (i = 0; i < 2; i++)
        -:  686:    {
     1806:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:        
        -:  690:    //discard card from hand
      903:  691:    discardCard(handPos, currentPlayer, state, 0);
      903:  692:    return 0;
        -:  693:}
        -:  694:
     2465:  695:int villageRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  696:    //+1 Card
     2465:  697:    drawCard(currentPlayer, state);
        -:  698:        
        -:  699:    //+2 Actions
     2465:  700:    state->numActions = state->numActions + 2;
        -:  701:        
        -:  702:    //discard played card from hand
        -:  703:    //BUG 4: Changed discardCard 0 to 1 causing the discardCard to not add the card to played pile.
     2465:  704:    discardCard(handPos, currentPlayer, state, 1);
     2465:  705:    return 0;
        -:  706:}
        -:  707:
      348:  708:int stewardRefactored(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos){
        -:  709:
        -:  710:    //BUG 5: Changed == 1 to 2 therefore making choice1 = 1 discarding cards and choice1 = 2 will always add 2 cards skipping the add 2 coins choice. While the choice of drawing 2 cards will always lead to discarding 2 cards.
      348:  711:    if (choice1 == 2)
        -:  712:    {
        -:  713:        //+2 cards
       55:  714:        drawCard(currentPlayer, state);
       55:  715:        drawCard(currentPlayer, state);
        -:  716:    }
      293:  717:    else if (choice1 == 2)
        -:  718:    {
        -:  719:        //+2 coins
    #####:  720:        state->coins = state->coins + 2;
        -:  721:    }
        -:  722:    else
        -:  723:    {
        -:  724:        //trash 2 cards in hand
      293:  725:        discardCard(choice2, currentPlayer, state, 1);
      293:  726:        discardCard(choice3, currentPlayer, state, 1);
        -:  727:    }
        -:  728:        
        -:  729:    //discard card from hand
      348:  730:    discardCard(handPos, currentPlayer, state, 0);
      348:  731:    return 0;
        -:  732:
        -:  733:}
        -:  734:
      309:  735:int embargoRefactored(struct gameState *state, int choice1, int handPos, int currentPlayer){
        -:  736:    //+2 Coins
      309:  737:    state->coins = state->coins + 2;
        -:  738:
        -:  739:    //see if selected pile is in play
      309:  740:    if ( state->supplyCount[choice1] == -1 )
        -:  741:    {
    #####:  742:        return -1;
        -:  743:    }
        -:  744:
        -:  745:    //add embargo token to selected supply pile
      309:  746:    state->embargoTokens[choice1]++;
        -:  747:        
        -:  748:    //trash card
      309:  749:    discardCard(handPos, currentPlayer, state, 1);		
      309:  750:    return 0;
        -:  751:}
        -:  752:
    14056:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
    14056:  760:  int currentPlayer = whoseTurn(state);
    14056:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
    14056:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND * 2];// moved above the if statement
    14056:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
    14056:  767:  int z = 0;// this is the counter for the temp hand
    14056:  768:  if (nextPlayer > (state->numPlayers - 1)){
     3505:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
    14056:  774:  switch( card ) 
        -:  775:    {
        -:  776:    //REFACTORED
      713:  777:    case adventurer:
      713:  778:        adventurerRefactored(drawntreasure, state, currentPlayer);
        -:  779:
      962:  780:    case council_room:
        -:  781:      //+4 Cards
     4810:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
     3848:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
      962:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
     3645:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
     2683:  793:	  if ( i != currentPlayer )
        -:  794:	    {
     1721:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
      962:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
      962:  802:      return 0;
        -:  803:			
      565:  804:    case feast: {
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
      565:  807:      int hc = MAX_HAND;
      565:  808:      if (state->handCount[currentPlayer] < hc) {
      565:  809:	hc = state->handCount[currentPlayer];
        -:  810:      }
     3370:  811:      for (i = 0; i < hc; i++){
     2805:  812:	temphand[i] = state->hand[currentPlayer][i];//Backup card
     2805:  813:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  814:      }
        -:  815:      //Backup hand
        -:  816:
        -:  817:      //Update Coins for Buy
      565:  818:      updateCoins(currentPlayer, state, 5);
      565:  819:      x = 1;//Condition to loop on
     1571:  820:      while( x == 1) {//Buy one card
      565:  821:	if (supplyCount(choice1, state) <= 0){
        -:  822:	  if (DEBUG)
        -:  823:	    printf("None of that card left, sorry!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  827:	  }
        7:  828:	  return -1;
        -:  829:	}
      558:  830:	else if (state->coins < getCost(choice1)){
      117:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
      117:  836:	  return -1;
        -:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
      441:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      441:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
     2612:  855:      for (i = 0; i < hc; i++){
     2171:  856:	state->hand[currentPlayer][i] = temphand[i];
     2171:  857:	temphand[i] = -1;
        -:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
      441:  861:      return 0;
        -:  862:    }
        -:  863:			
     2071:  864:    case gardens:
     2071:  865:      return -1;
        -:  866:			
     1102:  867:    case mine:
     1102:  868:      if (choice1 > state->numPlayers) {
      345:  869:	return -1;
        -:  870:      }
      757:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
      757:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
      542:  875:	  return -1;
        -:  876:	}
        -:  877:		
      215:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
      215:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
      138:  885:	  return -1;
        -:  886:	}
        -:  887:
       77:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
       77:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
      145:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
      145:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
       77:  898:	      discardCard(i, currentPlayer, state, 0);			
       77:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
       77:  903:      return 0;
        -:  904:			
      610:  905:    case remodel:
      610:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
      610:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
      387:  910:	  return -1;
        -:  911:	}
        -:  912:
      223:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
      223:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
      533:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
      504:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
      194:  923:	      discardCard(i, currentPlayer, state, 0);			
      194:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
      223:  929:      return 0;
        -:  930:
        -:  931:	//REFACTORED	
      902:  932:    case smithy:
      902:  933:        smithyRefactored(currentPlayer, state, handPos);
        -:  934:
     2465:  935:    case village:
     2465:  936:        villageRefactored(currentPlayer, state, handPos);
        -:  937:
     3184:  938:    case baron:
     3184:  939:      state->numBuys++;//Increase buys by 1!
     3184:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
     2539:  941:	int p = 0;//Iterator for hand!
     2539:  942:	int card_not_discarded = 1;//Flag for discard set!
    15438:  943:	while(card_not_discarded){
    10360:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1739:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
     1739:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1739:  947:	    state->discardCount[currentPlayer]++;
     8040:  948:	    for (;p < state->handCount[currentPlayer]; p++){
     6301:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
     1739:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1739:  952:	    state->handCount[currentPlayer]--;
     1739:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
     8621:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
      800:  960:	    if (supplyCount(estate, state) > 0){
      726:  961:	      gainCard(estate, state, 0, currentPlayer);
      726:  962:	      state->supplyCount[estate]--;//Decrement estates
      726:  963:	      if (supplyCount(estate, state) == 0){
       31:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
      800:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
     7821:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
      645:  977:	if (supplyCount(estate, state) > 0){
      595:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      595:  979:	  state->supplyCount[estate]--;//Decrement Estates
      595:  980:	  if (supplyCount(estate, state) == 0){
       27:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
     3184:  987:      return 0;
        -:  988:		
      341:  989:    case great_hall:
        -:  990:      //+1 Card
      341:  991:      drawCard(currentPlayer, state);
        -:  992:			
        -:  993:      //+1 Actions
      341:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
      341:  997:      discardCard(handPos, currentPlayer, state, 0);
      341:  998:      return 0;
        -:  999:		
      515: 1000:    case minion:
        -: 1001:      //+1 action
      515: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
      515: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:			
      515: 1007:      if (choice1)		//+2 coins
        -: 1008:	{
      414: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:			
      101: 1012:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1013:	{
        -: 1014:	  //discard hand
      474: 1015:	  while(numHandCards(state) > 0)
        -: 1016:	    {
      312: 1017:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //draw 4
      405: 1021:	  for (i = 0; i < 4; i++)
        -: 1022:	    {
      324: 1023:	      drawCard(currentPlayer, state);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //other players discard hand and redraw if hand size > 4
      279: 1027:	  for (i = 0; i < state->numPlayers; i++)
        -: 1028:	    {
      198: 1029:	      if (i != currentPlayer)
        -: 1030:		{
      117: 1031:		  if ( state->handCount[i] > 4 )
        -: 1032:		    {
        -: 1033:		      //discard hand
    #####: 1034:		      while( state->handCount[i] > 0 )
        -: 1035:			{
    #####: 1036:			  discardCard(handPos, i, state, 0);
        -: 1037:			}
        -: 1038:							
        -: 1039:		      //draw 4
    #####: 1040:		      for (j = 0; j < 4; j++)
        -: 1041:			{
    #####: 1042:			  drawCard(i, state);
        -: 1043:			}
        -: 1044:		    }
        -: 1045:		}
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}
      515: 1049:      return 0;
        -: 1050:
        -: 1051:	//REFACTORED	
      348: 1052:    case steward:
      348: 1053:        stewardRefactored(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1054:
     1392: 1055:    case tribute:
     1392: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       91: 1057:	if (state->deckCount[nextPlayer] > 0){
        2: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
       89: 1061:	else if (state->discardCount[nextPlayer] > 0){
       51: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       51: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
        -: 1073:      else{
     1301: 1074:	if (state->deckCount[nextPlayer] == 0){
     3293: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
     3033: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     3033: 1077:	    state->deckCount[nextPlayer]++;
     3033: 1078:	    state->discard[nextPlayer][i] = -1;
     3033: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:			    
      260: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	} 
     1301: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1086:	state->deckCount[nextPlayer]--;
     1301: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }    
        -: 1091:		       
     1392: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      483: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      483: 1094:	state->playedCardCount++;
      483: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
     5568: 1098:      for (i = 0; i <= 2; i ++){
     4176: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
     1308: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:		    
     2868: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      813: 1104:	  drawCard(currentPlayer, state);
      813: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
     2055: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:	    
     1392: 1112:      return 0;
        -: 1113:		
      598: 1114:    case ambassador:
      598: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
      598: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
      239: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
      359: 1122:      if (choice1 == handPos)
        -: 1123:	{
       79: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
     1646: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
     1366: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
      103: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
      280: 1134:      if (j < choice2)
        -: 1135:	{
      162: 1136:	  return -1;				
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG) 
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
      118: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:			
        -: 1145:      //each other player gains a copy of revealed card
      414: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
      296: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
      178: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
      118: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
      151: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
       95: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
       88: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
       26: 1164:		  discardCard(i, currentPlayer, state, 1);
       26: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}			
        -: 1169:
      118: 1170:      return 0;
        -: 1171:		
      323: 1172:    case cutpurse:
        -: 1173:
      323: 1174:      updateCoins(currentPlayer, state, 2);
     1175: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
      852: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
      533: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
        8: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
        4: 1183:		      discardCard(j, i, state, 0);
        4: 1184:		      break;
        -: 1185:		    }
        4: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}	
    #####: 1193:		      break;
        -: 1194:		    }		
        -: 1195:		}
        -: 1196:					
        -: 1197:	    }
        -: 1198:				
        -: 1199:	}				
        -: 1200:
        -: 1201:      //discard played card from hand
      323: 1202:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1203:
      323: 1204:      return 0;
        -: 1205:
        -: 1206:	//REFACTORED	
      309: 1207:    case embargo: 
      309: 1208:        embargoRefactored(state, choice1, handPos, currentPlayer);
        -: 1209:		
      636: 1210:    case outpost:
        -: 1211:      //set outpost flag
      636: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
      636: 1215:      discardCard(handPos, currentPlayer, state, 0);
      636: 1216:      return 0;
        -: 1217:		
      319: 1218:    case salvager:
        -: 1219:      //+1 buy
      319: 1220:      state->numBuys++;
        -: 1221:			
      319: 1222:      if (choice1)
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
      245: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1226:	  //trash card
      245: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
      319: 1231:      discardCard(handPos, currentPlayer, state, 0);
      319: 1232:      return 0;
        -: 1233:		
      694: 1234:    case sea_hag:
     2373: 1235:      for (i = 0; i < state->numPlayers; i++){
     1679: 1236:	if (i != currentPlayer){
      985: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      985: 1238:	  state->discardCount[i]++;
      985: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
        -: 1241:      }
      694: 1242:      return 0;
        -: 1243:		
      744: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
      744: 1246:      index = -1;
     4231: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
     3515: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
       28: 1251:	      index = i;
       28: 1252:	      break;
        -: 1253:	    }
        -: 1254:	}
      744: 1255:      if (index > -1)
        -: 1256:	{
        -: 1257:	  //trash both treasure cards
       28: 1258:	  discardCard(handPos, currentPlayer, state, 1);
       28: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:	  //gain 4 Gold cards
      140: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
      112: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
       28: 1268:	  return 1;
        -: 1269:	}
        -: 1270:			
        -: 1271:      //no second treasure_map found in hand
      716: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return -1;
        -: 1276:}
        -: 1277:
     9039: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
     9039: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
     5352: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5352: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
     9039: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
     9039: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
      843: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
     8196: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
       77: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
     8119: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
     8119: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
     8119: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
     9039: 1313:  return 0;
        -: 1314:}
        -: 1315:
    25151: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    25151: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
       25: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
    25126: 1331:  if (toFlag == 1)
        -: 1332:    {
      112: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      112: 1334:      state->deckCount[player]++;
        -: 1335:    }
    25014: 1336:  else if (toFlag == 2)
        -: 1337:    {
       76: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       76: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
    24938: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    24938: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
    25126: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
    25126: 1350:  return 0;
        -: 1351:}
        -: 1352:
   143342: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
   143342: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
   930986: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
   787644: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
   251572: 1365:	  state->coins += 1;
        -: 1366:	}
   536072: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    23952: 1369:	  state->coins += 2;
        -: 1370:	}
   512120: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
     5853: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
   143342: 1378:  state->coins += bonus;
        -: 1379:
   143342: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
*** Testing great_hall card
OK: numHandCardsBefore == numHandCardsAfter
OK: numActionsBefore + 1 == numActionsAfter
ALL TESTS PASSED
File 'dominion.c'
Lines executed:87.68% of 617
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7769574:    8:int compare(const void* a, const void* b) {
  7769574:    9:  if (*(int*)a > *(int*)b)
  2220843:   10:    return 1;
  5548731:   11:  if (*(int*)a < *(int*)b)
   335670:   12:    return -1;
  5213061:   13:  return 0;
        -:   14:}
        -:   15:
        5:   16:struct gameState* newGame() {
        5:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        5:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2005:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2005:   44:  SelectStream(1);
     2005:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2005:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      688:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1317:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14487:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   144870:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   131700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1317:   73:  if (numPlayers == 2)
        -:   74:    {
      694:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      623:   77:  else if (numPlayers == 3)
        -:   78:    {
      623:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1317:   87:  if (numPlayers == 2)
        -:   88:    {
      694:   89:      state->supplyCount[estate] = 8;
      694:   90:      state->supplyCount[duchy] = 8;
      694:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      623:   95:      state->supplyCount[estate] = 12;
      623:   96:      state->supplyCount[duchy] = 12;
      623:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1317:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1317:  102:  state->supplyCount[silver] = 40;
     1317:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27657:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   217305:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   204135:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13170:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2634:  115:		  if (numPlayers == 2){ 
      694:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      623:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11853:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13170:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   190965:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4574:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3257:  140:      state->deckCount[i] = 0;
    13028:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9771:  143:	  state->deck[i][j] = estate;
     9771:  144:	  state->deckCount[i]++;
        -:  145:	}
    26056:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22799:  148:	  state->deck[i][j] = copper;
    22799:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4574:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3257:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4574:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3257:  166:      state->handCount[i] = 0;
     3257:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    36876:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35559:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1317:  182:  state->outpostPlayed = 0;
     1317:  183:  state->phase = 0;
     1317:  184:  state->numActions = 1;
     1317:  185:  state->numBuys = 1;
     1317:  186:  state->playedCardCount = 0;
     1317:  187:  state->whoseTurn = 0;
     1317:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7902:  192:  for (it = 0; it < 5; it++){
     6585:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1317:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1317:  198:  return 0;
        -:  199:}
        -:  200:
   665965:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK * 2];
   665965:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   665965:  209:  if (state->deckCount[player] < 1)
   599218:  210:    return -1;
    66747:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  //assert(state->deckCount[player] <= MAX_HAND);
    66747:  215:  if (state->deckCount[player] > MAX_HAND) {
      491:  216:    state->deckCount[player] = MAX_HAND;
        -:  217:  }
  1310480:  218:  while (state->deckCount[player] > 0) {
  1176986:  219:    card = floor(Random() * state->deckCount[player]);
  1176986:  220:    newDeck[newDeckPos] = state->deck[player][card];
  1176986:  221:    newDeckPos++;
 70560748:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
 69383762:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
  1176986:  225:    state->deckCount[player]--;
        -:  226:  }
  1243733:  227:  for (i = 0; i < newDeckPos; i++) {
  1176986:  228:    state->deck[player][i] = newDeck[i];
  1176986:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
    66747:  232:  return 0;
        -:  233:}
        -:  234:
   131243:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
   131243:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
   131243:  241:  if (state->phase != 0)
        -:  242:    {
    22105:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
   109138:  247:  if ( state->numActions < 1 )
        -:  248:    {
     3682:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
   105456:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
   105456:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    91402:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    14054:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
     4803:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
     9251:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
     9251:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
     9251:  273:  return 0;
        -:  274:}
        -:  275:
   131931:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
   131931:  284:  who = state->whoseTurn;
        -:  285:
   131931:  286:  if (state->numBuys < 1){
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    19689:  289:    return -1;
   112242:  290:  } else if (supplyCount(supplyPos, state) <1){
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    34533:  293:    return -1;
    77709:  294:  } else if (state->coins < getCost(supplyPos)){
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    54910:  297:    return -1;
        -:  298:  } else {
    22799:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    22799:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:  
    22799:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    22799:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    22799:  312:  return 0;
        -:  313:}
        -:  314:
   264283:  315:int numHandCards(struct gameState *state) {
   264283:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
   859440:  319:int handCard(int handPos, struct gameState *state) {
   859440:  320:  int currentPlayer = whoseTurn(state);
   859440:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
   140724:  324:int supplyCount(int card, struct gameState *state) {
   140724:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
        6:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
        6:  330:  int count = 0;
        -:  331:
       36:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
       30:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
       36:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
       30:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
        6:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:
        6:  347:  return count;
        -:  348:}
        -:  349:
  1403840:  350:int whoseTurn(struct gameState *state) {
  1403840:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
   131887:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
   131887:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
  1551525:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  1419638:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1419638:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
   131887:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
   131887:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    76820:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    55067:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
   131887:  374:  state->outpostPlayed = 0;
   131887:  375:  state->phase = 0;
   131887:  376:  state->numActions = 1;
   131887:  377:  state->coins = 0;
   131887:  378:  state->numBuys = 1;
   131887:  379:  state->playedCardCount = 0;
   131887:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
   791322:  384:  for (k = 0; k < 5; k++){
   659435:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
   131887:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
   131887:  391:  return 0;
        -:  392:}
        -:  393:
   659979:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
   659979:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
      688:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
   659291:  405:  j = 0;
 17141566:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
 16482275:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    49984:  410:	  j++;
        -:  411:	}
        -:  412:    }
   659291:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
   659291:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
  1272715:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
  1272715:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
  1933154:  537:    for (i = 0; i < state->discardCount[player];i++){
  1563168:  538:      state->deck[player][i] = state->discard[player][i];
  1563168:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
   369986:  542:    state->deckCount[player] = state->discardCount[player];
   369986:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
   369986:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
   369986:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
   369986:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
   369986:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
   369986:  563:    if (deckCounter == 0)
   306752:  564:      return -1;
        -:  565:
    63234:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    63234:  567:    state->deckCount[player]--;
    63234:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   902729:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   902729:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   902729:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   902729:  580:    state->deckCount[player]--;
   902729:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   965963:  584:  return 0;
        -:  585:}
        -:  586:
   102961:  587:int getCost(int cardNumber)
        -:  588:{
   102961:  589:  switch( cardNumber ) 
        -:  590:    {
    11507:  591:    case curse:
    11507:  592:      return 0;
     8649:  593:    case estate:
     8649:  594:      return 2;
     6181:  595:    case duchy:
     6181:  596:      return 5;
     5913:  597:    case province:
     5913:  598:      return 8;
    11889:  599:    case copper:
    11889:  600:      return 0;
     7880:  601:    case silver:
     7880:  602:      return 3;
     5729:  603:    case gold:
     5729:  604:      return 6;
     5718:  605:    case adventurer:
     5718:  606:      return 6;
        1:  607:    case council_room:
        1:  608:      return 5;
       16:  609:    case feast:
       16:  610:      return 4;
     6790:  611:    case gardens:
     6790:  612:      return 4;
     5890:  613:    case mine:
     5890:  614:      return 5;
      189:  615:    case remodel:
      189:  616:      return 4;
     6734:  617:    case smithy:
     6734:  618:      return 4;
     7721:  619:    case village:
     7721:  620:      return 3;
       10:  621:    case baron:
       10:  622:      return 4;
        3:  623:    case great_hall:
        3:  624:      return 3;
     5958:  625:    case minion:
     5958:  626:      return 5;
        7:  627:    case steward:
        7:  628:      return 3;
     6044:  629:    case tribute:
     6044:  630:      return 5;
       18:  631:    case ambassador:
       18:  632:      return 3;
        8:  633:    case cutpurse:
        8:  634:      return 4;
        6:  635:    case embargo: 
        6:  636:      return 2;
        3:  637:    case outpost:
        3:  638:      return 5;
       54:  639:    case salvager:
       54:  640:      return 4;
        6:  641:    case sea_hag:
        6:  642:      return 4;
        7:  643:    case treasure_map:
        7:  644:      return 4;
        -:  645:    }
        -:  646:	
       30:  647:  return -1;
        -:  648:}
        -:  649:
     3345:  650:int adventurerRefactored(int drawntreasure, struct gameState *state, int currentPlayer){
        -:  651:    int cardDrawn;
        -:  652:    int temphand[MAX_HAND * 2];
     3345:  653:    int z = 0;
   601142:  654:    while(drawntreasure<2 && z<MAX_HAND){
   594453:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   292462:  656:            shuffle(currentPlayer, state);
        -:  657:        }
   594453:  658:        drawCard(currentPlayer, state);
   594453:  659:	if (state->handCount[currentPlayer] <= 0) {
        1:  660:	    break;
        -:  661:	}
   594452:  662:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   594452:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4694:  664:            drawntreasure++;
        -:  665:        else{
   589758:  666:            temphand[z]=cardDrawn;
        -:  667:            //BUG 1: Should remove bottom card instead of top card. Changed state->handCount[currentPlayer]-- to ++
   589758:  668:            state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
   589758:  669:            z++;
        -:  670:        }
        -:  671:    }
        -:  672:    //BUG 2: Changed z-1>=0 to z-1>=1 in order to discard only when z is equal to 3 instead of 2. Which will change how many cards will be in the temphand when drawn
   596448:  673:    while(z-1>=0){
   589758:  674:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   589758:  675:        z=z-1;
        -:  676:    }
     3345:  677:    return 0;
        -:  678:
        -:  679:}
        -:  680:
      903:  681:int smithyRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    // BUG 3: Changed i < 3 to i < 2 which will change how many cards are drawn from 3 to only 2
     2709:  685:    for (i = 0; i < 2; i++)
        -:  686:    {
     1806:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:        
        -:  690:    //discard card from hand
      903:  691:    discardCard(handPos, currentPlayer, state, 0);
      903:  692:    return 0;
        -:  693:}
        -:  694:
     2465:  695:int villageRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  696:    //+1 Card
     2465:  697:    drawCard(currentPlayer, state);
        -:  698:        
        -:  699:    //+2 Actions
     2465:  700:    state->numActions = state->numActions + 2;
        -:  701:        
        -:  702:    //discard played card from hand
        -:  703:    //BUG 4: Changed discardCard 0 to 1 causing the discardCard to not add the card to played pile.
     2465:  704:    discardCard(handPos, currentPlayer, state, 1);
     2465:  705:    return 0;
        -:  706:}
        -:  707:
      348:  708:int stewardRefactored(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos){
        -:  709:
        -:  710:    //BUG 5: Changed == 1 to 2 therefore making choice1 = 1 discarding cards and choice1 = 2 will always add 2 cards skipping the add 2 coins choice. While the choice of drawing 2 cards will always lead to discarding 2 cards.
      348:  711:    if (choice1 == 2)
        -:  712:    {
        -:  713:        //+2 cards
       55:  714:        drawCard(currentPlayer, state);
       55:  715:        drawCard(currentPlayer, state);
        -:  716:    }
      293:  717:    else if (choice1 == 2)
        -:  718:    {
        -:  719:        //+2 coins
    #####:  720:        state->coins = state->coins + 2;
        -:  721:    }
        -:  722:    else
        -:  723:    {
        -:  724:        //trash 2 cards in hand
      293:  725:        discardCard(choice2, currentPlayer, state, 1);
      293:  726:        discardCard(choice3, currentPlayer, state, 1);
        -:  727:    }
        -:  728:        
        -:  729:    //discard card from hand
      348:  730:    discardCard(handPos, currentPlayer, state, 0);
      348:  731:    return 0;
        -:  732:
        -:  733:}
        -:  734:
      309:  735:int embargoRefactored(struct gameState *state, int choice1, int handPos, int currentPlayer){
        -:  736:    //+2 Coins
      309:  737:    state->coins = state->coins + 2;
        -:  738:
        -:  739:    //see if selected pile is in play
      309:  740:    if ( state->supplyCount[choice1] == -1 )
        -:  741:    {
    #####:  742:        return -1;
        -:  743:    }
        -:  744:
        -:  745:    //add embargo token to selected supply pile
      309:  746:    state->embargoTokens[choice1]++;
        -:  747:        
        -:  748:    //trash card
      309:  749:    discardCard(handPos, currentPlayer, state, 1);		
      309:  750:    return 0;
        -:  751:}
        -:  752:
    14057:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
    14057:  760:  int currentPlayer = whoseTurn(state);
    14057:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
    14057:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND * 2];// moved above the if statement
    14057:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
    14057:  767:  int z = 0;// this is the counter for the temp hand
    14057:  768:  if (nextPlayer > (state->numPlayers - 1)){
     3505:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
    14057:  774:  switch( card ) 
        -:  775:    {
        -:  776:    //REFACTORED
      713:  777:    case adventurer:
      713:  778:        adventurerRefactored(drawntreasure, state, currentPlayer);
        -:  779:
      962:  780:    case council_room:
        -:  781:      //+4 Cards
     4810:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
     3848:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
      962:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
     3645:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
     2683:  793:	  if ( i != currentPlayer )
        -:  794:	    {
     1721:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
      962:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
      962:  802:      return 0;
        -:  803:			
      565:  804:    case feast: {
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
      565:  807:      int hc = MAX_HAND;
      565:  808:      if (state->handCount[currentPlayer] < hc) {
      565:  809:	hc = state->handCount[currentPlayer];
        -:  810:      }
     3370:  811:      for (i = 0; i < hc; i++){
     2805:  812:	temphand[i] = state->hand[currentPlayer][i];//Backup card
     2805:  813:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  814:      }
        -:  815:      //Backup hand
        -:  816:
        -:  817:      //Update Coins for Buy
      565:  818:      updateCoins(currentPlayer, state, 5);
      565:  819:      x = 1;//Condition to loop on
     1571:  820:      while( x == 1) {//Buy one card
      565:  821:	if (supplyCount(choice1, state) <= 0){
        -:  822:	  if (DEBUG)
        -:  823:	    printf("None of that card left, sorry!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  827:	  }
        7:  828:	  return -1;
        -:  829:	}
      558:  830:	else if (state->coins < getCost(choice1)){
      117:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
      117:  836:	  return -1;
        -:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
      441:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      441:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
     2612:  855:      for (i = 0; i < hc; i++){
     2171:  856:	state->hand[currentPlayer][i] = temphand[i];
     2171:  857:	temphand[i] = -1;
        -:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
      441:  861:      return 0;
        -:  862:    }
        -:  863:			
     2071:  864:    case gardens:
     2071:  865:      return -1;
        -:  866:			
     1102:  867:    case mine:
     1102:  868:      if (choice1 > state->numPlayers) {
      345:  869:	return -1;
        -:  870:      }
      757:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
      757:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
      542:  875:	  return -1;
        -:  876:	}
        -:  877:		
      215:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
      215:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
      138:  885:	  return -1;
        -:  886:	}
        -:  887:
       77:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
       77:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
      145:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
      145:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
       77:  898:	      discardCard(i, currentPlayer, state, 0);			
       77:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
       77:  903:      return 0;
        -:  904:			
      610:  905:    case remodel:
      610:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
      610:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
      387:  910:	  return -1;
        -:  911:	}
        -:  912:
      223:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
      223:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
      533:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
      504:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
      194:  923:	      discardCard(i, currentPlayer, state, 0);			
      194:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
      223:  929:      return 0;
        -:  930:
        -:  931:	//REFACTORED	
      902:  932:    case smithy:
      902:  933:        smithyRefactored(currentPlayer, state, handPos);
        -:  934:
     2465:  935:    case village:
     2465:  936:        villageRefactored(currentPlayer, state, handPos);
        -:  937:
     3184:  938:    case baron:
     3184:  939:      state->numBuys++;//Increase buys by 1!
     3184:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
     2539:  941:	int p = 0;//Iterator for hand!
     2539:  942:	int card_not_discarded = 1;//Flag for discard set!
    15438:  943:	while(card_not_discarded){
    10360:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1739:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
     1739:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1739:  947:	    state->discardCount[currentPlayer]++;
     8040:  948:	    for (;p < state->handCount[currentPlayer]; p++){
     6301:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
     1739:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1739:  952:	    state->handCount[currentPlayer]--;
     1739:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
     8621:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
      800:  960:	    if (supplyCount(estate, state) > 0){
      726:  961:	      gainCard(estate, state, 0, currentPlayer);
      726:  962:	      state->supplyCount[estate]--;//Decrement estates
      726:  963:	      if (supplyCount(estate, state) == 0){
       31:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
      800:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
     7821:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
      645:  977:	if (supplyCount(estate, state) > 0){
      595:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      595:  979:	  state->supplyCount[estate]--;//Decrement Estates
      595:  980:	  if (supplyCount(estate, state) == 0){
       27:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
     3184:  987:      return 0;
        -:  988:		
      342:  989:    case great_hall:
        -:  990:      //+1 Card
      342:  991:      drawCard(currentPlayer, state);
        -:  992:			
        -:  993:      //+1 Actions
      342:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
      342:  997:      discardCard(handPos, currentPlayer, state, 0);
      342:  998:      return 0;
        -:  999:		
      515: 1000:    case minion:
        -: 1001:      //+1 action
      515: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
      515: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:			
      515: 1007:      if (choice1)		//+2 coins
        -: 1008:	{
      414: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:			
      101: 1012:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1013:	{
        -: 1014:	  //discard hand
      474: 1015:	  while(numHandCards(state) > 0)
        -: 1016:	    {
      312: 1017:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //draw 4
      405: 1021:	  for (i = 0; i < 4; i++)
        -: 1022:	    {
      324: 1023:	      drawCard(currentPlayer, state);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //other players discard hand and redraw if hand size > 4
      279: 1027:	  for (i = 0; i < state->numPlayers; i++)
        -: 1028:	    {
      198: 1029:	      if (i != currentPlayer)
        -: 1030:		{
      117: 1031:		  if ( state->handCount[i] > 4 )
        -: 1032:		    {
        -: 1033:		      //discard hand
    #####: 1034:		      while( state->handCount[i] > 0 )
        -: 1035:			{
    #####: 1036:			  discardCard(handPos, i, state, 0);
        -: 1037:			}
        -: 1038:							
        -: 1039:		      //draw 4
    #####: 1040:		      for (j = 0; j < 4; j++)
        -: 1041:			{
    #####: 1042:			  drawCard(i, state);
        -: 1043:			}
        -: 1044:		    }
        -: 1045:		}
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}
      515: 1049:      return 0;
        -: 1050:
        -: 1051:	//REFACTORED	
      348: 1052:    case steward:
      348: 1053:        stewardRefactored(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1054:
     1392: 1055:    case tribute:
     1392: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       91: 1057:	if (state->deckCount[nextPlayer] > 0){
        2: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
       89: 1061:	else if (state->discardCount[nextPlayer] > 0){
       51: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       51: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
        -: 1073:      else{
     1301: 1074:	if (state->deckCount[nextPlayer] == 0){
     3293: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
     3033: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     3033: 1077:	    state->deckCount[nextPlayer]++;
     3033: 1078:	    state->discard[nextPlayer][i] = -1;
     3033: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:			    
      260: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	} 
     1301: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1086:	state->deckCount[nextPlayer]--;
     1301: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }    
        -: 1091:		       
     1392: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      483: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      483: 1094:	state->playedCardCount++;
      483: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
     5568: 1098:      for (i = 0; i <= 2; i ++){
     4176: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
     1308: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:		    
     2868: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      813: 1104:	  drawCard(currentPlayer, state);
      813: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
     2055: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:	    
     1392: 1112:      return 0;
        -: 1113:		
      598: 1114:    case ambassador:
      598: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
      598: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
      239: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
      359: 1122:      if (choice1 == handPos)
        -: 1123:	{
       79: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
     1646: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
     1366: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
      103: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
      280: 1134:      if (j < choice2)
        -: 1135:	{
      162: 1136:	  return -1;				
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG) 
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
      118: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:			
        -: 1145:      //each other player gains a copy of revealed card
      414: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
      296: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
      178: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
      118: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
      151: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
       95: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
       88: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
       26: 1164:		  discardCard(i, currentPlayer, state, 1);
       26: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}			
        -: 1169:
      118: 1170:      return 0;
        -: 1171:		
      323: 1172:    case cutpurse:
        -: 1173:
      323: 1174:      updateCoins(currentPlayer, state, 2);
     1175: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
      852: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
      533: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
        8: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
        4: 1183:		      discardCard(j, i, state, 0);
        4: 1184:		      break;
        -: 1185:		    }
        4: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}	
    #####: 1193:		      break;
        -: 1194:		    }		
        -: 1195:		}
        -: 1196:					
        -: 1197:	    }
        -: 1198:				
        -: 1199:	}				
        -: 1200:
        -: 1201:      //discard played card from hand
      323: 1202:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1203:
      323: 1204:      return 0;
        -: 1205:
        -: 1206:	//REFACTORED	
      309: 1207:    case embargo: 
      309: 1208:        embargoRefactored(state, choice1, handPos, currentPlayer);
        -: 1209:		
      636: 1210:    case outpost:
        -: 1211:      //set outpost flag
      636: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
      636: 1215:      discardCard(handPos, currentPlayer, state, 0);
      636: 1216:      return 0;
        -: 1217:		
      319: 1218:    case salvager:
        -: 1219:      //+1 buy
      319: 1220:      state->numBuys++;
        -: 1221:			
      319: 1222:      if (choice1)
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
      245: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1226:	  //trash card
      245: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
      319: 1231:      discardCard(handPos, currentPlayer, state, 0);
      319: 1232:      return 0;
        -: 1233:		
      694: 1234:    case sea_hag:
     2373: 1235:      for (i = 0; i < state->numPlayers; i++){
     1679: 1236:	if (i != currentPlayer){
      985: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      985: 1238:	  state->discardCount[i]++;
      985: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
        -: 1241:      }
      694: 1242:      return 0;
        -: 1243:		
      744: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
      744: 1246:      index = -1;
     4231: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
     3515: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
       28: 1251:	      index = i;
       28: 1252:	      break;
        -: 1253:	    }
        -: 1254:	}
      744: 1255:      if (index > -1)
        -: 1256:	{
        -: 1257:	  //trash both treasure cards
       28: 1258:	  discardCard(handPos, currentPlayer, state, 1);
       28: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:	  //gain 4 Gold cards
      140: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
      112: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
       28: 1268:	  return 1;
        -: 1269:	}
        -: 1270:			
        -: 1271:      //no second treasure_map found in hand
      716: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return -1;
        -: 1276:}
        -: 1277:
     9040: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
     9040: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
     5353: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5353: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
     9040: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
     9040: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
      843: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
     8197: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
       77: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
     8120: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
     8120: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
     8120: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
     9040: 1313:  return 0;
        -: 1314:}
        -: 1315:
    25151: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    25151: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
       25: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
    25126: 1331:  if (toFlag == 1)
        -: 1332:    {
      112: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      112: 1334:      state->deckCount[player]++;
        -: 1335:    }
    25014: 1336:  else if (toFlag == 2)
        -: 1337:    {
       76: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       76: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
    24938: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    24938: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
    25126: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
    25126: 1350:  return 0;
        -: 1351:}
        -: 1352:
   143343: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
   143343: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
   930992: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
   787649: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
   251576: 1365:	  state->coins += 1;
        -: 1366:	}
   536073: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    23952: 1369:	  state->coins += 2;
        -: 1370:	}
   512121: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
     5853: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
   143343: 1378:  state->coins += bonus;
        -: 1379:
   143343: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
*** Testing village card
OK: numHandCardsBefore == numHandCardsAfter
OK: numActionsBefore + 2 == numActionsAfter
ALL TESTS PASSED
File 'dominion.c'
Lines executed:87.68% of 617
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  7769604:    8:int compare(const void* a, const void* b) {
  7769604:    9:  if (*(int*)a > *(int*)b)
  2220843:   10:    return 1;
  5548761:   11:  if (*(int*)a < *(int*)b)
   335678:   12:    return -1;
  5213083:   13:  return 0;
        -:   14:}
        -:   15:
        6:   16:struct gameState* newGame() {
        6:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        6:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     2006:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2006:   44:  SelectStream(1);
     2006:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2006:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
      688:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1318:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    14498:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   144980:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   131800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1318:   73:  if (numPlayers == 2)
        -:   74:    {
      695:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      623:   77:  else if (numPlayers == 3)
        -:   78:    {
      623:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1318:   87:  if (numPlayers == 2)
        -:   88:    {
      695:   89:      state->supplyCount[estate] = 8;
      695:   90:      state->supplyCount[duchy] = 8;
      695:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      623:   95:      state->supplyCount[estate] = 12;
      623:   96:      state->supplyCount[duchy] = 12;
      623:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1318:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1318:  102:  state->supplyCount[silver] = 40;
     1318:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    27678:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   217470:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   204290:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    13180:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2636:  115:		  if (numPlayers == 2){ 
      695:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      623:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    11862:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    13180:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   191110:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4577:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3259:  140:      state->deckCount[i] = 0;
    13036:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9777:  143:	  state->deck[i][j] = estate;
     9777:  144:	  state->deckCount[i]++;
        -:  145:	}
    26072:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22813:  148:	  state->deck[i][j] = copper;
    22813:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4577:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3259:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4577:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3259:  166:      state->handCount[i] = 0;
     3259:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    36904:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    35586:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1318:  182:  state->outpostPlayed = 0;
     1318:  183:  state->phase = 0;
     1318:  184:  state->numActions = 1;
     1318:  185:  state->numBuys = 1;
     1318:  186:  state->playedCardCount = 0;
     1318:  187:  state->whoseTurn = 0;
     1318:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     7908:  192:  for (it = 0; it < 5; it++){
     6590:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1318:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1318:  198:  return 0;
        -:  199:}
        -:  200:
   665967:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK * 2];
   665967:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   665967:  209:  if (state->deckCount[player] < 1)
   599218:  210:    return -1;
    66749:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
        -:  214:  //assert(state->deckCount[player] <= MAX_HAND);
    66749:  215:  if (state->deckCount[player] > MAX_HAND) {
      491:  216:    state->deckCount[player] = MAX_HAND;
        -:  217:  }
  1310504:  218:  while (state->deckCount[player] > 0) {
  1177006:  219:    card = floor(Random() * state->deckCount[player]);
  1177006:  220:    newDeck[newDeckPos] = state->deck[player][card];
  1177006:  221:    newDeckPos++;
 70560819:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
 69383813:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
  1177006:  225:    state->deckCount[player]--;
        -:  226:  }
  1243755:  227:  for (i = 0; i < newDeckPos; i++) {
  1177006:  228:    state->deck[player][i] = newDeck[i];
  1177006:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
    66749:  232:  return 0;
        -:  233:}
        -:  234:
   131243:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
   131243:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
   131243:  241:  if (state->phase != 0)
        -:  242:    {
    22105:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
   109138:  247:  if ( state->numActions < 1 )
        -:  248:    {
     3682:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
   105456:  253:  card = handCard(handPos, state);
        -:  254:	
        -:  255:  //check if selected card is an action
   105456:  256:  if ( card < adventurer || card > treasure_map )
        -:  257:    {
    91402:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
    14054:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  263:    {
     4803:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
     9251:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
     9251:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  272:	
     9251:  273:  return 0;
        -:  274:}
        -:  275:
   131931:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
   131931:  284:  who = state->whoseTurn;
        -:  285:
   131931:  286:  if (state->numBuys < 1){
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
    19689:  289:    return -1;
   112242:  290:  } else if (supplyCount(supplyPos, state) <1){
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
    34533:  293:    return -1;
    77709:  294:  } else if (state->coins < getCost(supplyPos)){
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    54910:  297:    return -1;
        -:  298:  } else {
    22799:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
    22799:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  302:  
    22799:  303:    state->coins = (state->coins) - (getCost(supplyPos));
    22799:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
    22799:  312:  return 0;
        -:  313:}
        -:  314:
   264285:  315:int numHandCards(struct gameState *state) {
   264285:  316:  return state->handCount[ whoseTurn(state) ];
        -:  317:}
        -:  318:
   859440:  319:int handCard(int handPos, struct gameState *state) {
   859440:  320:  int currentPlayer = whoseTurn(state);
   859440:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
   140727:  324:int supplyCount(int card, struct gameState *state) {
   140727:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
        6:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
        6:  330:  int count = 0;
        -:  331:
       36:  332:  for (i = 0; i < state->deckCount[player]; i++)
        -:  333:    {
       30:  334:      if (state->deck[player][i] == card) count++;
        -:  335:    }
        -:  336:
       36:  337:  for (i = 0; i < state->handCount[player]; i++)
        -:  338:    {
       30:  339:      if (state->hand[player][i] == card) count++;
        -:  340:    }
        -:  341:
        6:  342:  for (i = 0; i < state->discardCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
        -:  345:    }
        -:  346:
        6:  347:  return count;
        -:  348:}
        -:  349:
  1403844:  350:int whoseTurn(struct gameState *state) {
  1403844:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
   131887:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
   131887:  357:  int currentPlayer = whoseTurn(state);
        -:  358:  
        -:  359:  //Discard hand
  1551525:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
  1419638:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
  1419638:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
   131887:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
   131887:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
    76820:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
    55067:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
   131887:  374:  state->outpostPlayed = 0;
   131887:  375:  state->phase = 0;
   131887:  376:  state->numActions = 1;
   131887:  377:  state->coins = 0;
   131887:  378:  state->numBuys = 1;
   131887:  379:  state->playedCardCount = 0;
   131887:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
   791322:  384:  for (k = 0; k < 5; k++){
   659435:  385:    drawCard(state->whoseTurn, state);//Draw a card
        -:  386:  }
        -:  387:
        -:  388:  //Update money
   131887:  389:  updateCoins(state->whoseTurn, state , 0);
        -:  390:
   131887:  391:  return 0;
        -:  392:}
        -:  393:
   659979:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
   659979:  399:  if (state->supplyCount[province] == 0)
        -:  400:    {
      688:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
   659291:  405:  j = 0;
 17141566:  406:  for (i = 0; i < 25; i++)
        -:  407:    {
 16482275:  408:      if (state->supplyCount[i] == 0)
        -:  409:	{
    49984:  410:	  j++;
        -:  411:	}
        -:  412:    }
   659291:  413:  if ( j >= 3)
        -:  414:    {
    #####:  415:      return 1;
        -:  416:    }
        -:  417:
   659291:  418:  return 0;
        -:  419:}
        -:  420:
    #####:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
    #####:  424:  int score = 0;
        -:  425:  //score from hand
    #####:  426:  for (i = 0; i < state->handCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  431:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
    #####:  437:  for (i = 0; i < state->discardCount[player]; i++)
        -:  438:    {
    #####:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  442:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
    #####:  448:  for (i = 0; i < state->discardCount[player]; i++)
        -:  449:    {
    #####:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  453:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  456:    }
        -:  457:
    #####:  458:  return score;
        -:  459:}
        -:  460:
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
  1272721:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
  1272721:  532:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
  1933154:  537:    for (i = 0; i < state->discardCount[player];i++){
  1563168:  538:      state->deck[player][i] = state->discard[player][i];
  1563168:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
   369986:  542:    state->deckCount[player] = state->discardCount[player];
   369986:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
   369986:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
   369986:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
   369986:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
   369986:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
   369986:  563:    if (deckCounter == 0)
   306752:  564:      return -1;
        -:  565:
    63234:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    63234:  567:    state->deckCount[player]--;
    63234:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
   902735:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
   902735:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
   902735:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   902735:  580:    state->deckCount[player]--;
   902735:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
   965969:  584:  return 0;
        -:  585:}
        -:  586:
   102961:  587:int getCost(int cardNumber)
        -:  588:{
   102961:  589:  switch( cardNumber ) 
        -:  590:    {
    11507:  591:    case curse:
    11507:  592:      return 0;
     8649:  593:    case estate:
     8649:  594:      return 2;
     6181:  595:    case duchy:
     6181:  596:      return 5;
     5913:  597:    case province:
     5913:  598:      return 8;
    11889:  599:    case copper:
    11889:  600:      return 0;
     7880:  601:    case silver:
     7880:  602:      return 3;
     5729:  603:    case gold:
     5729:  604:      return 6;
     5718:  605:    case adventurer:
     5718:  606:      return 6;
        1:  607:    case council_room:
        1:  608:      return 5;
       16:  609:    case feast:
       16:  610:      return 4;
     6790:  611:    case gardens:
     6790:  612:      return 4;
     5890:  613:    case mine:
     5890:  614:      return 5;
      189:  615:    case remodel:
      189:  616:      return 4;
     6734:  617:    case smithy:
     6734:  618:      return 4;
     7721:  619:    case village:
     7721:  620:      return 3;
       10:  621:    case baron:
       10:  622:      return 4;
        3:  623:    case great_hall:
        3:  624:      return 3;
     5958:  625:    case minion:
     5958:  626:      return 5;
        7:  627:    case steward:
        7:  628:      return 3;
     6044:  629:    case tribute:
     6044:  630:      return 5;
       18:  631:    case ambassador:
       18:  632:      return 3;
        8:  633:    case cutpurse:
        8:  634:      return 4;
        6:  635:    case embargo: 
        6:  636:      return 2;
        3:  637:    case outpost:
        3:  638:      return 5;
       54:  639:    case salvager:
       54:  640:      return 4;
        6:  641:    case sea_hag:
        6:  642:      return 4;
        7:  643:    case treasure_map:
        7:  644:      return 4;
        -:  645:    }
        -:  646:	
       30:  647:  return -1;
        -:  648:}
        -:  649:
     3345:  650:int adventurerRefactored(int drawntreasure, struct gameState *state, int currentPlayer){
        -:  651:    int cardDrawn;
        -:  652:    int temphand[MAX_HAND * 2];
     3345:  653:    int z = 0;
   601142:  654:    while(drawntreasure<2 && z<MAX_HAND){
   594453:  655:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   292462:  656:            shuffle(currentPlayer, state);
        -:  657:        }
   594453:  658:        drawCard(currentPlayer, state);
   594453:  659:	if (state->handCount[currentPlayer] <= 0) {
        1:  660:	    break;
        -:  661:	}
   594452:  662:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   594452:  663:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     4694:  664:            drawntreasure++;
        -:  665:        else{
   589758:  666:            temphand[z]=cardDrawn;
        -:  667:            //BUG 1: Should remove bottom card instead of top card. Changed state->handCount[currentPlayer]-- to ++
   589758:  668:            state->handCount[currentPlayer]++; //this should just remove the top card (the most recently drawn one).
   589758:  669:            z++;
        -:  670:        }
        -:  671:    }
        -:  672:    //BUG 2: Changed z-1>=0 to z-1>=1 in order to discard only when z is equal to 3 instead of 2. Which will change how many cards will be in the temphand when drawn
   596448:  673:    while(z-1>=0){
   589758:  674:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   589758:  675:        z=z-1;
        -:  676:    }
     3345:  677:    return 0;
        -:  678:
        -:  679:}
        -:  680:
      903:  681:int smithyRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  682:    int i;
        -:  683:    //+3 Cards
        -:  684:    // BUG 3: Changed i < 3 to i < 2 which will change how many cards are drawn from 3 to only 2
     2709:  685:    for (i = 0; i < 2; i++)
        -:  686:    {
     1806:  687:        drawCard(currentPlayer, state);
        -:  688:    }
        -:  689:        
        -:  690:    //discard card from hand
      903:  691:    discardCard(handPos, currentPlayer, state, 0);
      903:  692:    return 0;
        -:  693:}
        -:  694:
     2466:  695:int villageRefactored(int currentPlayer, struct gameState *state, int handPos){
        -:  696:    //+1 Card
     2466:  697:    drawCard(currentPlayer, state);
        -:  698:        
        -:  699:    //+2 Actions
     2466:  700:    state->numActions = state->numActions + 2;
        -:  701:        
        -:  702:    //discard played card from hand
        -:  703:    //BUG 4: Changed discardCard 0 to 1 causing the discardCard to not add the card to played pile.
     2466:  704:    discardCard(handPos, currentPlayer, state, 1);
     2466:  705:    return 0;
        -:  706:}
        -:  707:
      348:  708:int stewardRefactored(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos){
        -:  709:
        -:  710:    //BUG 5: Changed == 1 to 2 therefore making choice1 = 1 discarding cards and choice1 = 2 will always add 2 cards skipping the add 2 coins choice. While the choice of drawing 2 cards will always lead to discarding 2 cards.
      348:  711:    if (choice1 == 2)
        -:  712:    {
        -:  713:        //+2 cards
       55:  714:        drawCard(currentPlayer, state);
       55:  715:        drawCard(currentPlayer, state);
        -:  716:    }
      293:  717:    else if (choice1 == 2)
        -:  718:    {
        -:  719:        //+2 coins
    #####:  720:        state->coins = state->coins + 2;
        -:  721:    }
        -:  722:    else
        -:  723:    {
        -:  724:        //trash 2 cards in hand
      293:  725:        discardCard(choice2, currentPlayer, state, 1);
      293:  726:        discardCard(choice3, currentPlayer, state, 1);
        -:  727:    }
        -:  728:        
        -:  729:    //discard card from hand
      348:  730:    discardCard(handPos, currentPlayer, state, 0);
      348:  731:    return 0;
        -:  732:
        -:  733:}
        -:  734:
      309:  735:int embargoRefactored(struct gameState *state, int choice1, int handPos, int currentPlayer){
        -:  736:    //+2 Coins
      309:  737:    state->coins = state->coins + 2;
        -:  738:
        -:  739:    //see if selected pile is in play
      309:  740:    if ( state->supplyCount[choice1] == -1 )
        -:  741:    {
    #####:  742:        return -1;
        -:  743:    }
        -:  744:
        -:  745:    //add embargo token to selected supply pile
      309:  746:    state->embargoTokens[choice1]++;
        -:  747:        
        -:  748:    //trash card
      309:  749:    discardCard(handPos, currentPlayer, state, 1);		
      309:  750:    return 0;
        -:  751:}
        -:  752:
    14058:  753:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  754:{
        -:  755:  int i;
        -:  756:  int j;
        -:  757:  int k;
        -:  758:  int x;
        -:  759:  int index;
    14058:  760:  int currentPlayer = whoseTurn(state);
    14058:  761:  int nextPlayer = currentPlayer + 1;
        -:  762:
    14058:  763:  int tributeRevealedCards[2] = {-1, -1};
        -:  764:  int temphand[MAX_HAND * 2];// moved above the if statement
    14058:  765:  int drawntreasure=0;
        -:  766:  int cardDrawn;
    14058:  767:  int z = 0;// this is the counter for the temp hand
    14058:  768:  if (nextPlayer > (state->numPlayers - 1)){
     3505:  769:    nextPlayer = 0;
        -:  770:  }
        -:  771:  
        -:  772:	
        -:  773:  //uses switch to select card and perform actions
    14058:  774:  switch( card ) 
        -:  775:    {
        -:  776:    //REFACTORED
      713:  777:    case adventurer:
      713:  778:        adventurerRefactored(drawntreasure, state, currentPlayer);
        -:  779:
      962:  780:    case council_room:
        -:  781:      //+4 Cards
     4810:  782:      for (i = 0; i < 4; i++)
        -:  783:	{
     3848:  784:	  drawCard(currentPlayer, state);
        -:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
      962:  788:      state->numBuys++;
        -:  789:			
        -:  790:      //Each other player draws a card
     3645:  791:      for (i = 0; i < state->numPlayers; i++)
        -:  792:	{
     2683:  793:	  if ( i != currentPlayer )
        -:  794:	    {
     1721:  795:	      drawCard(i, state);
        -:  796:	    }
        -:  797:	}
        -:  798:			
        -:  799:      //put played card in played card pile
      962:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
      962:  802:      return 0;
        -:  803:			
      565:  804:    case feast: {
        -:  805:      //gain card with cost up to 5
        -:  806:      //Backup hand
      565:  807:      int hc = MAX_HAND;
      565:  808:      if (state->handCount[currentPlayer] < hc) {
      565:  809:	hc = state->handCount[currentPlayer];
        -:  810:      }
     3370:  811:      for (i = 0; i < hc; i++){
     2805:  812:	temphand[i] = state->hand[currentPlayer][i];//Backup card
     2805:  813:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  814:      }
        -:  815:      //Backup hand
        -:  816:
        -:  817:      //Update Coins for Buy
      565:  818:      updateCoins(currentPlayer, state, 5);
      565:  819:      x = 1;//Condition to loop on
     1571:  820:      while( x == 1) {//Buy one card
      565:  821:	if (supplyCount(choice1, state) <= 0){
        -:  822:	  if (DEBUG)
        -:  823:	    printf("None of that card left, sorry!\n");
        -:  824:
        -:  825:	  if (DEBUG){
        -:  826:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  827:	  }
        7:  828:	  return -1;
        -:  829:	}
      558:  830:	else if (state->coins < getCost(choice1)){
      117:  831:	  printf("That card is too expensive!\n");
        -:  832:
        -:  833:	  if (DEBUG){
        -:  834:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  835:	  }
      117:  836:	  return -1;
        -:  837:	}
        -:  838:	else{
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  842:	  }
        -:  843:
      441:  844:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
      441:  845:	  x = 0;//No more buying cards
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  849:	  }
        -:  850:
        -:  851:	}
        -:  852:      }     
        -:  853:
        -:  854:      //Reset Hand
     2612:  855:      for (i = 0; i < hc; i++){
     2171:  856:	state->hand[currentPlayer][i] = temphand[i];
     2171:  857:	temphand[i] = -1;
        -:  858:      }
        -:  859:      //Reset Hand
        -:  860:      			
      441:  861:      return 0;
        -:  862:    }
        -:  863:			
     2071:  864:    case gardens:
     2071:  865:      return -1;
        -:  866:			
     1102:  867:    case mine:
     1102:  868:      if (choice1 > state->numPlayers) {
      345:  869:	return -1;
        -:  870:      }
      757:  871:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  872:
      757:  873:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  874:	{
      542:  875:	  return -1;
        -:  876:	}
        -:  877:		
      215:  878:      if (choice2 > treasure_map || choice2 < curse)
        -:  879:	{
    #####:  880:	  return -1;
        -:  881:	}
        -:  882:
      215:  883:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  884:	{
      138:  885:	  return -1;
        -:  886:	}
        -:  887:
       77:  888:      gainCard(choice2, state, 2, currentPlayer);
        -:  889:
        -:  890:      //discard card from hand
       77:  891:      discardCard(handPos, currentPlayer, state, 0);
        -:  892:
        -:  893:      //discard trashed card
      145:  894:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  895:	{
      145:  896:	  if (state->hand[currentPlayer][i] == j)
        -:  897:	    {
       77:  898:	      discardCard(i, currentPlayer, state, 0);			
       77:  899:	      break;
        -:  900:	    }
        -:  901:	}
        -:  902:			
       77:  903:      return 0;
        -:  904:			
      610:  905:    case remodel:
      610:  906:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  907:
      610:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  909:	{
      387:  910:	  return -1;
        -:  911:	}
        -:  912:
      223:  913:      gainCard(choice2, state, 0, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
      223:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
      533:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
      504:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
      194:  923:	      discardCard(i, currentPlayer, state, 0);			
      194:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:
        -:  928:
      223:  929:      return 0;
        -:  930:
        -:  931:	//REFACTORED	
      902:  932:    case smithy:
      902:  933:        smithyRefactored(currentPlayer, state, handPos);
        -:  934:
     2466:  935:    case village:
     2466:  936:        villageRefactored(currentPlayer, state, handPos);
        -:  937:
     3185:  938:    case baron:
     3185:  939:      state->numBuys++;//Increase buys by 1!
     3185:  940:      if (choice1 > 0){//Boolean true or going to discard an estate
     2540:  941:	int p = 0;//Iterator for hand!
     2540:  942:	int card_not_discarded = 1;//Flag for discard set!
    15447:  943:	while(card_not_discarded){
    10367:  944:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
     1739:  945:	    state->coins += 4;//Add 4 coins to the amount of coins
     1739:  946:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
     1739:  947:	    state->discardCount[currentPlayer]++;
     8040:  948:	    for (;p < state->handCount[currentPlayer]; p++){
     6301:  949:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  950:	    }
     1739:  951:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
     1739:  952:	    state->handCount[currentPlayer]--;
     1739:  953:	    card_not_discarded = 0;//Exit the loop
        -:  954:	  }
     8628:  955:	  else if (p > state->handCount[currentPlayer]){
        -:  956:	    if(DEBUG) {
        -:  957:	      printf("No estate cards in your hand, invalid choice\n");
        -:  958:	      printf("Must gain an estate if there are any\n");
        -:  959:	    }
      801:  960:	    if (supplyCount(estate, state) > 0){
      727:  961:	      gainCard(estate, state, 0, currentPlayer);
      727:  962:	      state->supplyCount[estate]--;//Decrement estates
      727:  963:	      if (supplyCount(estate, state) == 0){
       31:  964:		isGameOver(state);
        -:  965:	      }
        -:  966:	    }
      801:  967:	    card_not_discarded = 0;//Exit the loop
        -:  968:	  }
        -:  969:			    
        -:  970:	  else{
     7827:  971:	    p++;//Next card
        -:  972:	  }
        -:  973:	}
        -:  974:      }
        -:  975:			    
        -:  976:      else{
      645:  977:	if (supplyCount(estate, state) > 0){
      595:  978:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
      595:  979:	  state->supplyCount[estate]--;//Decrement Estates
      595:  980:	  if (supplyCount(estate, state) == 0){
       27:  981:	    isGameOver(state);
        -:  982:	  }
        -:  983:	}
        -:  984:      }
        -:  985:	    
        -:  986:      
     3185:  987:      return 0;
        -:  988:		
      342:  989:    case great_hall:
        -:  990:      //+1 Card
      342:  991:      drawCard(currentPlayer, state);
        -:  992:			
        -:  993:      //+1 Actions
      342:  994:      state->numActions++;
        -:  995:			
        -:  996:      //discard card from hand
      342:  997:      discardCard(handPos, currentPlayer, state, 0);
      342:  998:      return 0;
        -:  999:		
      515: 1000:    case minion:
        -: 1001:      //+1 action
      515: 1002:      state->numActions++;
        -: 1003:			
        -: 1004:      //discard card from hand
      515: 1005:      discardCard(handPos, currentPlayer, state, 0);
        -: 1006:			
      515: 1007:      if (choice1)		//+2 coins
        -: 1008:	{
      414: 1009:	  state->coins = state->coins + 2;
        -: 1010:	}
        -: 1011:			
      101: 1012:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1013:	{
        -: 1014:	  //discard hand
      474: 1015:	  while(numHandCards(state) > 0)
        -: 1016:	    {
      312: 1017:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1018:	    }
        -: 1019:				
        -: 1020:	  //draw 4
      405: 1021:	  for (i = 0; i < 4; i++)
        -: 1022:	    {
      324: 1023:	      drawCard(currentPlayer, state);
        -: 1024:	    }
        -: 1025:				
        -: 1026:	  //other players discard hand and redraw if hand size > 4
      279: 1027:	  for (i = 0; i < state->numPlayers; i++)
        -: 1028:	    {
      198: 1029:	      if (i != currentPlayer)
        -: 1030:		{
      117: 1031:		  if ( state->handCount[i] > 4 )
        -: 1032:		    {
        -: 1033:		      //discard hand
    #####: 1034:		      while( state->handCount[i] > 0 )
        -: 1035:			{
    #####: 1036:			  discardCard(handPos, i, state, 0);
        -: 1037:			}
        -: 1038:							
        -: 1039:		      //draw 4
    #####: 1040:		      for (j = 0; j < 4; j++)
        -: 1041:			{
    #####: 1042:			  drawCard(i, state);
        -: 1043:			}
        -: 1044:		    }
        -: 1045:		}
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}
      515: 1049:      return 0;
        -: 1050:
        -: 1051:	//REFACTORED	
      348: 1052:    case steward:
      348: 1053:        stewardRefactored(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1054:
     1392: 1055:    case tribute:
     1392: 1056:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
       91: 1057:	if (state->deckCount[nextPlayer] > 0){
        2: 1058:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        2: 1059:	  state->deckCount[nextPlayer]--;
        -: 1060:	}
       89: 1061:	else if (state->discardCount[nextPlayer] > 0){
       51: 1062:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
       51: 1063:	  state->discardCount[nextPlayer]--;
        -: 1064:	}
        -: 1065:	else{
        -: 1066:	  //No Card to Reveal
        -: 1067:	  if (DEBUG){
        -: 1068:	    printf("No cards to reveal\n");
        -: 1069:	  }
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
        -: 1073:      else{
     1301: 1074:	if (state->deckCount[nextPlayer] == 0){
     3293: 1075:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
     3033: 1076:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
     3033: 1077:	    state->deckCount[nextPlayer]++;
     3033: 1078:	    state->discard[nextPlayer][i] = -1;
     3033: 1079:	    state->discardCount[nextPlayer]--;
        -: 1080:	  }
        -: 1081:			    
      260: 1082:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1083:	} 
     1301: 1084:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1085:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1086:	state->deckCount[nextPlayer]--;
     1301: 1087:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
     1301: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
     1301: 1089:	state->deckCount[nextPlayer]--;
        -: 1090:      }    
        -: 1091:		       
     1392: 1092:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
      483: 1093:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
      483: 1094:	state->playedCardCount++;
      483: 1095:	tributeRevealedCards[1] = -1;
        -: 1096:      }
        -: 1097:
     5568: 1098:      for (i = 0; i <= 2; i ++){
     4176: 1099:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
     1308: 1100:	  state->coins += 2;
        -: 1101:	}
        -: 1102:		    
     2868: 1103:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
      813: 1104:	  drawCard(currentPlayer, state);
      813: 1105:	  drawCard(currentPlayer, state);
        -: 1106:	}
        -: 1107:	else{//Action Card
     2055: 1108:	  state->numActions = state->numActions + 2;
        -: 1109:	}
        -: 1110:      }
        -: 1111:	    
     1392: 1112:      return 0;
        -: 1113:		
      598: 1114:    case ambassador:
      598: 1115:      j = 0;		//used to check if player has enough cards to discard
        -: 1116:
      598: 1117:      if (choice2 > 2 || choice2 < 0)
        -: 1118:	{
      239: 1119:	  return -1;				
        -: 1120:	}
        -: 1121:
      359: 1122:      if (choice1 == handPos)
        -: 1123:	{
       79: 1124:	  return -1;
        -: 1125:	}
        -: 1126:
     1646: 1127:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1128:	{
     1366: 1129:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1130:	    {
      103: 1131:	      j++;
        -: 1132:	    }
        -: 1133:	}
      280: 1134:      if (j < choice2)
        -: 1135:	{
      162: 1136:	  return -1;				
        -: 1137:	}
        -: 1138:
        -: 1139:      if (DEBUG) 
        -: 1140:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1141:
        -: 1142:      //increase supply count for choosen card by amount being discarded
      118: 1143:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1144:			
        -: 1145:      //each other player gains a copy of revealed card
      414: 1146:      for (i = 0; i < state->numPlayers; i++)
        -: 1147:	{
      296: 1148:	  if (i != currentPlayer)
        -: 1149:	    {
      178: 1150:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1151:	    }
        -: 1152:	}
        -: 1153:
        -: 1154:      //discard played card from hand
      118: 1155:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1156:
        -: 1157:      //trash copies of cards returned to supply
      151: 1158:      for (j = 0; j < choice2; j++)
        -: 1159:	{
       95: 1160:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1161:	    {
       88: 1162:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1163:		{
       26: 1164:		  discardCard(i, currentPlayer, state, 1);
       26: 1165:		  break;
        -: 1166:		}
        -: 1167:	    }
        -: 1168:	}			
        -: 1169:
      118: 1170:      return 0;
        -: 1171:		
      323: 1172:    case cutpurse:
        -: 1173:
      323: 1174:      updateCoins(currentPlayer, state, 2);
     1175: 1175:      for (i = 0; i < state->numPlayers; i++)
        -: 1176:	{
      852: 1177:	  if (i != currentPlayer)
        -: 1178:	    {
      533: 1179:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1180:		{
        8: 1181:		  if (state->hand[i][j] == copper)
        -: 1182:		    {
        4: 1183:		      discardCard(j, i, state, 0);
        4: 1184:		      break;
        -: 1185:		    }
        4: 1186:		  if (j == state->handCount[i])
        -: 1187:		    {
    #####: 1188:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1189:			{
        -: 1190:			  if (DEBUG)
        -: 1191:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1192:			}	
    #####: 1193:		      break;
        -: 1194:		    }		
        -: 1195:		}
        -: 1196:					
        -: 1197:	    }
        -: 1198:				
        -: 1199:	}				
        -: 1200:
        -: 1201:      //discard played card from hand
      323: 1202:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1203:
      323: 1204:      return 0;
        -: 1205:
        -: 1206:	//REFACTORED	
      309: 1207:    case embargo: 
      309: 1208:        embargoRefactored(state, choice1, handPos, currentPlayer);
        -: 1209:		
      636: 1210:    case outpost:
        -: 1211:      //set outpost flag
      636: 1212:      state->outpostPlayed++;
        -: 1213:			
        -: 1214:      //discard card
      636: 1215:      discardCard(handPos, currentPlayer, state, 0);
      636: 1216:      return 0;
        -: 1217:		
      319: 1218:    case salvager:
        -: 1219:      //+1 buy
      319: 1220:      state->numBuys++;
        -: 1221:			
      319: 1222:      if (choice1)
        -: 1223:	{
        -: 1224:	  //gain coins equal to trashed card
      245: 1225:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1226:	  //trash card
      245: 1227:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1228:	}
        -: 1229:			
        -: 1230:      //discard card
      319: 1231:      discardCard(handPos, currentPlayer, state, 0);
      319: 1232:      return 0;
        -: 1233:		
      694: 1234:    case sea_hag:
     2373: 1235:      for (i = 0; i < state->numPlayers; i++){
     1679: 1236:	if (i != currentPlayer){
      985: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
      985: 1238:	  state->discardCount[i]++;
      985: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
        -: 1241:      }
      694: 1242:      return 0;
        -: 1243:		
      744: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
      744: 1246:      index = -1;
     4231: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
     3515: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
       28: 1251:	      index = i;
       28: 1252:	      break;
        -: 1253:	    }
        -: 1254:	}
      744: 1255:      if (index > -1)
        -: 1256:	{
        -: 1257:	  //trash both treasure cards
       28: 1258:	  discardCard(handPos, currentPlayer, state, 1);
       28: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
        -: 1261:	  //gain 4 Gold cards
      140: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
      112: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
       28: 1268:	  return 1;
        -: 1269:	}
        -: 1270:			
        -: 1271:      //no second treasure_map found in hand
      716: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
    #####: 1275:  return -1;
        -: 1276:}
        -: 1277:
     9041: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
     9041: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
     5353: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5353: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
     9041: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
     9041: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
      843: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
     8198: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
       77: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
     8121: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
     8121: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
     8121: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
     9041: 1313:  return 0;
        -: 1314:}
        -: 1315:
    25152: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    25152: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
       25: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
    25127: 1331:  if (toFlag == 1)
        -: 1332:    {
      112: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      112: 1334:      state->deckCount[player]++;
        -: 1335:    }
    25015: 1336:  else if (toFlag == 2)
        -: 1337:    {
       76: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       76: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
    24939: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    24939: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
    25127: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
    25127: 1350:  return 0;
        -: 1351:}
        -: 1352:
   143344: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
   143344: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
   930998: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
   787654: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
   251580: 1365:	  state->coins += 1;
        -: 1366:	}
   536074: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    23952: 1369:	  state->coins += 2;
        -: 1370:	}
   512122: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
     5853: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
   143344: 1378:  state->coins += bonus;
        -: 1379:
   143344: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
